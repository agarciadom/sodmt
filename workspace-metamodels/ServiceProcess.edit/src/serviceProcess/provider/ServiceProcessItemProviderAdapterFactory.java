/**
 */
package serviceProcess.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import serviceProcess.util.ServiceProcessAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ServiceProcessItemProviderAdapterFactory extends ServiceProcessAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable
{
  /**
   * This keeps track of the root adapter factory that delegates to this adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComposedAdapterFactory parentAdapterFactory;

  /**
   * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IChangeNotifier changeNotifier = new ChangeNotifier();

  /**
   * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Collection<Object> supportedTypes = new ArrayList<Object>();

  /**
   * This constructs an instance.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ServiceProcessItemProviderAdapterFactory()
  {
    supportedTypes.add(IEditingDomainItemProvider.class);
    supportedTypes.add(IStructuredItemContentProvider.class);
    supportedTypes.add(ITreeItemContentProvider.class);
    supportedTypes.add(IItemLabelProvider.class);
    supportedTypes.add(IItemPropertySource.class);
  }

  /**
   * This keeps track of the one adapter used for all {@link serviceProcess.ServiceProcess} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ServiceProcessItemProvider serviceProcessItemProvider;

  /**
   * This creates an adapter for a {@link serviceProcess.ServiceProcess}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createServiceProcessAdapter()
  {
    if (serviceProcessItemProvider == null)
    {
      serviceProcessItemProvider = new ServiceProcessItemProvider(this);
    }

    return serviceProcessItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link serviceProcess.ActivityPerformanceAnnotation} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ActivityPerformanceAnnotationItemProvider activityPerformanceAnnotationItemProvider;

  /**
   * This creates an adapter for a {@link serviceProcess.ActivityPerformanceAnnotation}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createActivityPerformanceAnnotationAdapter()
  {
    if (activityPerformanceAnnotationItemProvider == null)
    {
      activityPerformanceAnnotationItemProvider = new ActivityPerformanceAnnotationItemProvider(this);
    }

    return activityPerformanceAnnotationItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link serviceProcess.ProcessPerformanceAnnotation} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ProcessPerformanceAnnotationItemProvider processPerformanceAnnotationItemProvider;

  /**
   * This creates an adapter for a {@link serviceProcess.ProcessPerformanceAnnotation}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createProcessPerformanceAnnotationAdapter()
  {
    if (processPerformanceAnnotationItemProvider == null)
    {
      processPerformanceAnnotationItemProvider = new ProcessPerformanceAnnotationItemProvider(this);
    }

    return processPerformanceAnnotationItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link serviceProcess.ProcessControlFlow} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ProcessControlFlowItemProvider processControlFlowItemProvider;

  /**
   * This creates an adapter for a {@link serviceProcess.ProcessControlFlow}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createProcessControlFlowAdapter()
  {
    if (processControlFlowItemProvider == null)
    {
      processControlFlowItemProvider = new ProcessControlFlowItemProvider(this);
    }

    return processControlFlowItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link serviceProcess.ServiceActivity} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ServiceActivityItemProvider serviceActivityItemProvider;

  /**
   * This creates an adapter for a {@link serviceProcess.ServiceActivity}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createServiceActivityAdapter()
  {
    if (serviceActivityItemProvider == null)
    {
      serviceActivityItemProvider = new ServiceActivityItemProvider(this);
    }

    return serviceActivityItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link serviceProcess.ProcessStart} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ProcessStartItemProvider processStartItemProvider;

  /**
   * This creates an adapter for a {@link serviceProcess.ProcessStart}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createProcessStartAdapter()
  {
    if (processStartItemProvider == null)
    {
      processStartItemProvider = new ProcessStartItemProvider(this);
    }

    return processStartItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link serviceProcess.ProcessFinish} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ProcessFinishItemProvider processFinishItemProvider;

  /**
   * This creates an adapter for a {@link serviceProcess.ProcessFinish}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createProcessFinishAdapter()
  {
    if (processFinishItemProvider == null)
    {
      processFinishItemProvider = new ProcessFinishItemProvider(this);
    }

    return processFinishItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link serviceProcess.ProcessDecision} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ProcessDecisionItemProvider processDecisionItemProvider;

  /**
   * This creates an adapter for a {@link serviceProcess.ProcessDecision}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createProcessDecisionAdapter()
  {
    if (processDecisionItemProvider == null)
    {
      processDecisionItemProvider = new ProcessDecisionItemProvider(this);
    }

    return processDecisionItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link serviceProcess.ProcessFork} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ProcessForkItemProvider processForkItemProvider;

  /**
   * This creates an adapter for a {@link serviceProcess.ProcessFork}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createProcessForkAdapter()
  {
    if (processForkItemProvider == null)
    {
      processForkItemProvider = new ProcessForkItemProvider(this);
    }

    return processForkItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link serviceProcess.ProcessJoin} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ProcessJoinItemProvider processJoinItemProvider;

  /**
   * This creates an adapter for a {@link serviceProcess.ProcessJoin}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createProcessJoinAdapter()
  {
    if (processJoinItemProvider == null)
    {
      processJoinItemProvider = new ProcessJoinItemProvider(this);
    }

    return processJoinItemProvider;
  }

  /**
   * This returns the root adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComposeableAdapterFactory getRootAdapterFactory()
  {
    return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
  }

  /**
   * This sets the composed adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
  {
    this.parentAdapterFactory = parentAdapterFactory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object type)
  {
    return supportedTypes.contains(type) || super.isFactoryForType(type);
  }

  /**
   * This implementation substitutes the factory itself as the key for the adapter.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter adapt(Notifier notifier, Object type)
  {
    return super.adapt(notifier, this);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object adapt(Object object, Object type)
  {
    if (isFactoryForType(type))
    {
      Object adapter = super.adapt(object, type);
      if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter)))
      {
        return adapter;
      }
    }

    return null;
  }

  /**
   * This adds a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void addListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.addListener(notifyChangedListener);
  }

  /**
   * This removes a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void removeListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.removeListener(notifyChangedListener);
  }

  /**
   * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void fireNotifyChanged(Notification notification)
  {
    changeNotifier.fireNotifyChanged(notification);

    if (parentAdapterFactory != null)
    {
      parentAdapterFactory.fireNotifyChanged(notification);
    }
  }

  /**
   * This disposes all of the item providers created by this factory. 
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void dispose()
  {
    if (serviceProcessItemProvider != null) serviceProcessItemProvider.dispose();
    if (activityPerformanceAnnotationItemProvider != null) activityPerformanceAnnotationItemProvider.dispose();
    if (processPerformanceAnnotationItemProvider != null) processPerformanceAnnotationItemProvider.dispose();
    if (processControlFlowItemProvider != null) processControlFlowItemProvider.dispose();
    if (serviceActivityItemProvider != null) serviceActivityItemProvider.dispose();
    if (processStartItemProvider != null) processStartItemProvider.dispose();
    if (processFinishItemProvider != null) processFinishItemProvider.dispose();
    if (processDecisionItemProvider != null) processDecisionItemProvider.dispose();
    if (processForkItemProvider != null) processForkItemProvider.dispose();
    if (processJoinItemProvider != null) processJoinItemProvider.dispose();
  }

}
