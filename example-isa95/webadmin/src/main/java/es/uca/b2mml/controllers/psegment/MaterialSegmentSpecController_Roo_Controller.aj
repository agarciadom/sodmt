// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.uca.b2mml.controllers.psegment;

import es.uca.b2mml.controllers.psegment.MaterialSegmentSpecController;
import es.uca.b2mml.domain.psegment.MaterialSegmentSpec;
import es.uca.b2mml.domain.psegment.ProcessSegment;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect MaterialSegmentSpecController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String MaterialSegmentSpecController.create(@Valid MaterialSegmentSpec materialSegmentSpec, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, materialSegmentSpec);
            return "materialsegmentspecs/create";
        }
        uiModel.asMap().clear();
        materialSegmentSpec.persist();
        return "redirect:/materialsegmentspecs/" + encodeUrlPathSegment(materialSegmentSpec.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String MaterialSegmentSpecController.createForm(Model uiModel) {
        populateEditForm(uiModel, new MaterialSegmentSpec());
        List<String[]> dependencies = new ArrayList<String[]>();
        if (ProcessSegment.countProcessSegments() == 0) {
            dependencies.add(new String[] { "processsegment", "processsegments" });
        }
        uiModel.addAttribute("dependencies", dependencies);
        return "materialsegmentspecs/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String MaterialSegmentSpecController.show(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("materialsegmentspec", MaterialSegmentSpec.findMaterialSegmentSpec(id));
        uiModel.addAttribute("itemId", id);
        return "materialsegmentspecs/show";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String MaterialSegmentSpecController.update(@Valid MaterialSegmentSpec materialSegmentSpec, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, materialSegmentSpec);
            return "materialsegmentspecs/update";
        }
        uiModel.asMap().clear();
        materialSegmentSpec.merge();
        return "redirect:/materialsegmentspecs/" + encodeUrlPathSegment(materialSegmentSpec.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String MaterialSegmentSpecController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, MaterialSegmentSpec.findMaterialSegmentSpec(id));
        return "materialsegmentspecs/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String MaterialSegmentSpecController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        MaterialSegmentSpec materialSegmentSpec = MaterialSegmentSpec.findMaterialSegmentSpec(id);
        materialSegmentSpec.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/materialsegmentspecs";
    }
    
    String MaterialSegmentSpecController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
