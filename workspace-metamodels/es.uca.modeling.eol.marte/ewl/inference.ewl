import '../eol/throughput.eol';
import '../eol/time_limits.eol';

wizard SetGlobalConstraints {
  guard : self.isKindOf(Activity)
  title : 'Set global constraints'
  do {
    transaction {
      var globalTimeLimit := self.getTimeLimitWithDefault(10.0d);
      var globalThroughput := self.getThroughputWithDefault(1.0d);

      globalTimeLimit := System.user.promptReal("Please enter the global time limit (in seconds)", globalTimeLimit);
      globalThroughput := System.user.promptReal("Please enter the global throughput (in requests/second)", globalThroughput);

      self.setTimeLimit(globalTimeLimit);
      self.setThroughput(globalThroughput);
    }
  }
}

wizard InferTimeLimits {
  guard : self.isKindOf(Activity) and self.getScenario().isDefined()
  title : 'Infer time limits'
  do {
    transaction {
      var finalNodes := self.getSinks();
      if (not distributeTime(self.getTimeLimit(), finalNodes)) {
        abort;
        return;
      }
    } -- transaction
  } -- do
} -- wizard

wizard InferThroughput {
  guard : self.isKindOf(Activity) and self.getScenario().isDefined()
  title : 'Infer throughput'
  do {
    transaction {
      var initialNode := self.getSources();
      if (initialNode.size() <> 1) {
        System.user.inform('There should only be one source');
        abort;
        return;
      }
      if (not annotateThroughput(initialNode.first)) {
        abort;
        return;
      }
    } -- transaction
  } -- do
} -- wizard

wizard SetTimeLimit {
  guard : self.isKindOf(ExecutableNode)
  title : 'Set time limit expression'
  do {
    transaction {
      var minTime := System.user.promptReal("Please enter the minimum time (in seconds):", self.getMinimumTime());
      if (minTime.isUndefined()) {
        abort; return;
      }

      var weight := System.user.promptReal("Please enter the weight:", self.getWeight());
      if (weight.isUndefined()) {
        abort; return;
      }

      self.setRequiredTimeLimit(minTime, weight);
    }
  }
}

wizard SetRepetitions {
  guard : self.isKindOf(ExecutableNode)
  title : 'Set repetitions'
  do {
    transaction {
      var reps := System.user.promptReal("Please enter the number of repetitions:", self.getRepetitions());
      if (reps.isUndefined()) {
        abort; return;
      }
      self.setRepetitions(reps);
    }
  }
}

wizard SetProbability {
  guard : self.isKindOf(ControlFlow) and self.source.isKindOf(DecisionNode)
  title : 'Set probability'
  do {
    transaction {
      var prob := 0.0;
      while (prob <= 0.0 or prob > 1) {
        prob := System.user.promptReal("Please enter a probability within (0, 1]", prob);
        if (prob.isUndefined()) {
          abort; return;
        }
      }
      self.setProbability(prob);
    }
  }
}