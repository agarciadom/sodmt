rule CopyServiceProcess
        transform s : Source!"ServiceProcess"
        to t : Target!"ServiceComposition" {
        t."activity" ::= s."activity";
        t."edge" ::= s."edge";
}

rule CopyEdgeCondition
        transform s : Source!"EdgeCondition"
        to t : Target!"EdgeCondition" {
        t."condition" := s."condition";
        t."language" := s."language".instance;
        t."probability" := s."probability";
        t.swimlane := s.getDefaultSwimlane();
        t."edge" ::= s."edge";
}

rule CopyPerformanceAnnotation
        transform s : Source!"PerformanceAnnotation"
        to t : Target!"PerformanceAnnotation" {
        t."manuallyAdded" := s."manuallyAdded";
        t."transactionsPerSec" := s."transactionsPerSec";
        t."secsTimeLimit" := s."secsTimeLimit";
        t.swimlane := s.getDefaultSwimlane();
        t."execNode" ::= s."execNode";
}

rule CopyServiceActivity
        transform s : Source!"ServiceActivity"
        to t : Target!"ServiceActivity" {
        t."name" := s."name";
        t."transactionsPerSec" := s."transactionsPerSec";
        t."secsTimeLimit" := s."secsTimeLimit";
        t.swimlanes := Sequence { new Target!Swimlane };
        t.swimlanes.first().name := 'default';
        t.swimlanes.first().activity := t;
}

rule CopyObjectFlow
        transform s : Source!"ObjectFlow"
        to t : Target!"ObjectFlow" {
        t."target" ::= s."target";
        t."source" ::= s."source";
        t."condition" ::= s."condition";
}

rule CopyControlFlow
        transform s : Source!"ControlFlow"
        to t : Target!"ControlFlow" {
        t."target" ::= s."target";
        t."source" ::= s."source";
        t."condition" ::= s."condition";
}

rule CopyExecutableNode
        transform s : Source!"ExecutableNode"
        to t : Target!"ExecutableNode" {
        t."name" := s."name";
        t.swimlane := s.getDefaultSwimlane();
        t."annotation" ::= s."annotation";
        t."incoming" ::= s."incoming";
        t."outgoing" ::= s."outgoing";
}

rule CopyInitialNode
        transform s : Source!"InitialNode"
        to t : Target!"InitialNode" {
        t.swimlane := s.getDefaultSwimlane();
        t."incoming" ::= s."incoming";
        t."outgoing" ::= s."outgoing";
}

rule CopyFinalNode
        transform s : Source!"FinalNode"
        to t : Target!"FinalNode" {
        t.swimlane := s.getDefaultSwimlane();
        t."incoming" ::= s."incoming";
        t."outgoing" ::= s."outgoing";
}

rule CopyForkNode
        transform s : Source!"ForkNode"
        to t : Target!"ForkNode" {
        t.swimlane := s.getDefaultSwimlane();
        t."incoming" ::= s."incoming";
        t."outgoing" ::= s."outgoing";
}

rule CopyJoinNode
        transform s : Source!"JoinNode"
        to t : Target!"JoinNode" {
        t.swimlane := s.getDefaultSwimlane();
        t."incoming" ::= s."incoming";
        t."outgoing" ::= s."outgoing";
}

rule CopyDecisionNode
        transform s : Source!"DecisionNode"
        to t : Target!"DecisionNode" {
        t.swimlane := s.getDefaultSwimlane();
        t."incoming" ::= s."incoming";
        t."outgoing" ::= s."outgoing";
}

operation Source!ActivityNode getDefaultSwimlane() : Target!Swimlane {
  return self.activity.equivalent().swimlanes.first();
}