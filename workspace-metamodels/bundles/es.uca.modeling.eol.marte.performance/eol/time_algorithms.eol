/*
  Script for measuring the performance of the inference algorithms
  in various situations.

  Copyright (C) 2011 Antonio García Domínguez.  All rights reserved. This
  program and the accompanying materials are made available under the terms
  of the Eclipse Public License v1.0 which accompanies this distribution,
  and is available at http://www.eclipse.org/legal/epl-v10.html

  Contributors:
     Antonio García Domínguez - initial API and implementation
*/
import 'platform:/plugin/es.uca.modeling.eol.marte/eol/time_limits.eol';
import 'platform:/plugin/es.uca.modeling.eol.marte/eol/throughput.eol';

// UTILITY OPERATIONS FOR THE JAVA CODE

$pre levels >= 0
operation createForkJoinActivity(levels : Integer) : Activity {
  var activity := Model.createInstance("Activity");

  var prevNode := activity.addNode("InitialNode");
  for (level in 1.to(levels)) {
    var forkNode := activity.addNode("ForkNode");
    var joinNode := activity.addNode("JoinNode");
    var branchA  := activity.addNode("OpaqueAction");
    var branchB  := activity.addNode("OpaqueAction");

    branchA.name := "A" + level;
    branchB.name := "B" + level;
    activity.addEdge(prevNode, forkNode);
    activity.addEdge(forkNode, branchA);
    activity.addEdge(forkNode, branchB);
    activity.addEdge(branchA, joinNode);
    activity.addEdge(branchB, joinNode);

    prevNode := joinNode;
  }

  var finalNode := activity.addNode("ActivityFinalNode");
  activity.addEdge(prevNode, finalNode);
  return activity;
}

operation annotateFixed(activity, respT, throughput, default_mtime, default_weight) {
  activity.createScenario(respT, throughput);

  var action_counter := 0;
  for (action in activity.node.select(e:ExecutableNode|true)) {
    action.createStep(default_mtime, default_weight, "sw" + action_counter);
    action_counter := action_counter + 1;
  }
}

operation annotateRandom(activity, respT, throughput, max_weight, random) {
  activity.createScenario(respT, throughput);

  var action_counter := 0;
  var available_time := 0.5 * respT;
  for (forkNode in activity.node.select(e:ForkNode|true)) {
    var siblings := forkNode.outgoing.collect(e|e.target);
    var mtimeA := random.nextDouble() * available_time;
    var mtimeB := random.nextDouble() * available_time;
    available_time := available_time - mtimeA.max(mtimeB);

    siblings.first().createStep(mtimeA, random.nextDouble() * max_weight, "swA" + action_counter);
    siblings.last().createStep(mtimeB, random.nextDouble() * max_weight, "swB" + action_counter);
    action_counter := action_counter + 1;
  }
}

/*
  OPERATIONS FOR Action
*/
operation Action createStep(mtime, weight, variable) {
  var step := Model.createInstance("GaStep");
  step.base_NamedElement := self;
  step.hostDemand.add(
    "(expr=" + mtime +
    " + " + weight +
    " * " + variable +
    ", unit=s, source=req)");  
}

/*
  OPERATIONS FOR Activity
*/
operation Activity addNode(type) : ActivityNode {
  var node := Model.createInstance(type);
  self.node.add(node);
  node.activity := self;
  return node;
}

operation Activity addEdge(source, target) : ActivityEdge {
  var cflow := Model.createInstance("ControlFlow");
  cflow.source := source;
  cflow.target := target;
  self.edge.add(cflow);
  return cflow;
}

operation Activity createScenario(respT, throughput) {
  var scenario := Model.createInstance("GaScenario");
  scenario.base_NamedElement := self;
  scenario.respT.add("(value=" + respT + ", unit=s, source=req)");
  scenario.throughput.add("(value=" + throughput + ", unit=Hz, source=req)");
}

operation deleteAll(activity : Activity) {
  for (node in activity.node) {
    delete node.getStep();
  }
  delete activity.getScenario(); 
  delete activity;
}
