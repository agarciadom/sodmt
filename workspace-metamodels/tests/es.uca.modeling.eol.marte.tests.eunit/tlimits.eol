import 'test-common.eol';
import 'platform:/plugin/es.uca.modeling.eol.marte/eol/time_limits.eol';

$onlyWith Map { "Model" = "UML" }
$onlyWith Map { "Model" = "MultiDiagram" }
@test
operation handleOrderAnnotations() {
  var inferredTL := inferTimeLimits("Handle Order", 1, true);
  assertTimeLimit("Evaluate Order", 0.4, inferredTL);
  assertTimeLimit("Create Invoice", 0.2, inferredTL);
  assertTimeLimit("Perform Payment", 0.2, inferredTL);
  assertTimeLimit("Ship Order", 0.4, inferredTL);
  assertTimeLimit("Close Order", 0.2, inferredTL);
}

$onlyWith Map { "Model" = "MultiDiagram" }
@test
operation evaluateOrderAnnotations() {
  var inferredTL := inferTimeLimits("Evaluate Order", 1.0d, true);
  assertTimeLimit("Create Order", 0.2, inferredTL);
  assertTimeLimit("List Warehouses", 0.2, inferredTL);
  assertTimeLimit("LoopThroughOrderItems", 0.2, inferredTL);

  // Note: we have not set any reps, so reps=1 by default.
  //
  // The test is assumed to run once more than the body of the loop,
  // so we actually split the 0.2s of LoopThroughOrderItems into:
  //
  // 0.2/3 for rep 1 of Select Next Order Item
  // 0.2/3 for rep 1 of CheckIfWarehouseHasStock
  // 0.2/3 for rep 2 of Select Next Order Item
  assertTimeLimit("CheckIfWarehouseHasStock", 0.2/3, inferredTL);
  assertTimeLimit("Select Next Order Item", 0.2/3, inferredTL);

  // Then each of the activities inside CheckIfWarehouseHasStock gets half of that
  assertTimeLimit("Check Stock", 0.2/6, inferredTL);
  assertTimeLimit("Remove Warehouse", 0.2/6, inferredTL);
  
  assertTimeLimit("Accept Order", 0.2, inferredTL);
  assertTimeLimit("Select Closest Warehouse", 0.2, inferredTL);
  assertTimeLimit("Reject Order", 0.4, inferredTL);
}

$onlyWith Map { "Model" = "UML" }
@test
operation seqWithRepsAnnotations() {
  var inferredTL := inferTimeLimits("SequenceWithRepetitions", 1, true);
  assertTimeLimit("A", 0.125, inferredTL);
  assertTimeLimit("B", 0.25,  inferredTL);
  assertTimeLimit("C", 0.125, inferredTL);
}

$onlyWith Map { "Model" = "UML" }
@test
operation handleOrderSW() {
  inferTimeLimits("Handle Order", 1, true);
  var aHO = Activity.all.selectOne(a | a.name == 'Handle Order');
  var ctxParamMap := aHO.buildContextParameterMap();
  var expectedParamMap := Map { "swEO" = 0.0, "swCI" = 0.2, "swPP" = 0.2, "swSO" = 0.4, "swCO" = 0.2 };
  assertContextParamsEqual(expectedParamMap, ctxParamMap);
}

operation assertTimeLimit(name : String, expected : Real, tlMap : Map) {
  var actual = tlMap.get(name);
  //assertEquals(name + " should have " + expected + "s but has " + actual, expected, actual, 5);
  assertEquals(expected, actual, 10);
}

operation assertContextParamsEqual(expectedParamMap : Map, ctxParamMap : Map) {
  assertEquals("There should be " + expectedParamMap.size + " context parameters, but there were " + ctxParamMap.size + ": " + expectedParamMap + " <-> " + ctxParamMap, expectedParamMap.size, ctxParamMap.size);
  for (param in expectedParamMap.keySet) {
    var expected := expectedParamMap.get(param);
    var obtained := ctxParamMap.get(param);
    assertEquals("The " + param + " context parameter should be equivalent to " + expected, expected, obtained, 5);
  }
}

operation Activity buildContextParameterMap() : Map {
  var vslTool := self.getVSLTool();
  return self.stereotypeApplications
             .collect(c : GaAnalysisContext | c.context).flatten
             .collect(c | vslTool.parseContextParameter(c))
             .aggregate(c | c.left, c.right);
}

operation buildTimeLimitMap() : Map {
  var vslTool := Activity.all.first.getVSLTool();
  var result : Map;
  for (execNode in ExecutableNode.all) {
    var kvCalc := execNode.stereotypeApplications
                          .collect(c : GaScenario | c.hostDemand)
                          .flatten
                          .collect(h | vslTool.getKeyvalMap(h))
                          .selectOne(m | m.get("source") = "calc");
    if (kvCalc.isDefined()) {
      result.put(execNode.name, kvCalc.get("value").asReal());
    }
  }
  return result;
}

operation inferTimeLimits(activityName : String, globalLimit : Real, shouldSucceed : Boolean) {
  assertEquals(shouldSucceed, distributeTime(globalLimit, getFinalNodes(activityName)));
  return buildTimeLimitMap();
}
