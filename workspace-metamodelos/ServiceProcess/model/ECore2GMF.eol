-*
  We could simply run everything outside of any operations. However,
  we wouldn't be able to reuse this code by importing it from another
  EOL script: it appears that importing a module only gives us the
  operations defined therein.
*-
serviceProcessMainBody();

-- Main body of the script -----------------------------------------
operation serviceProcessMainBody() {
  removeUselessLabels();
  defineMaximumSizes();
  defineEditAndViewPatterns();
  defineReadOnlyLabels();
}

-- Remove labels from nodes which don't need them ------------------
operation removeUselessLabels() {
  for (n in Sequence {
              'InitialNodeLabel', 'FinalNodeLabel',
              'ForkNodeLabel', 'JoinNodeLabel',
              'DecisionNodeLabel',
              'ControlNodeEdgeConditionExternalLabel',
              'ExecutableNodeAnnotationExternalLabel'}) {
     removeLabel(n);
  }
}

-- Define maximum sizes for ServiceActivity's labels ---------------
operation defineMaximumSizes() {
  for (name in Sequence {'ServiceActivityTransactionsPerSecLabelFigure',
                         'ServiceActivitySecsTimeLimitLabelFigure'}) {
    var label := GmfGraph!Label.all.selectOne(r | r.name=name);
    label.maximumSize := new GmfGraph!Dimension;
    label.maximumSize.dx := 10000;
    label.maximumSize.dy := 50;
  }
}

-- Label edit and view patterns -------------------------------------
operation defineEditAndViewPatterns() {
  var MSGFMT_METHOD := GmfMap!LabelTextAccessMethod#MESSAGE_FORMAT;
  var NATIVE_METHOD := GmfMap!LabelTextAccessMethod#NATIVE;
  for (entry in Sequence {
                  Sequence {'AnnotationManuallyAddedLabel', 'manual'},
                  Sequence {'PerformanceAnnotationTransactionsPerSecLabel',
                    'transactionsPerSec', NATIVE_METHOD, '{0,number}'},
                  Sequence {'ServiceActivityTransactionsPerSecLabel',
                    'transactionsPerSec', NATIVE_METHOD, '{0,number}'},
                  Sequence {'EdgeConditionProbabilityLabel', 'prob',
                    NATIVE_METHOD, '{0,number}'},
                  Sequence {'PerformanceAnnotationSecsTimeLimitLabel',
                    'timeLimit', NATIVE_METHOD, '{0,number}'},
                  Sequence {'ServiceActivitySecsTimeLimitLabel', 'timeLimit',
                    NATIVE_METHOD, '{0,number}'}}) {
    var labelName      := entry.at(0);
    var viewPatternLHS := entry.at(1);
    var editMethod     := MSGFMT_METHOD;
    var editPattern    := '{0}';
    if (entry.size() > 2) {
      editMethod  = entry.at(2);
      editPattern = entry.at(3);
    }

    setFeatureLabelPatterns(labelName,
                            editMethod, editPattern,
                            MSGFMT_METHOD, (viewPatternLHS + ' = {0}'));
  }
}

-- Make some labels read only ---------------------------------------
operation defineReadOnlyLabels() {
  for (n in Sequence {'EdgeConditionLabel',
                      'AnnotationManuallyAddedLabel',
                      'PerformanceAnnotationLabel'}) {
    makeReadOnly(n);
  }
}

-- UTILITY OPERATIONS -----------------------------------------------

operation makeReadOnly(diagramLabelName : String) {
  for (labelMapping in findLabelMappingsByName(diagramLabelName)) {
    labelMapping.readOnly := true;
  }
}

operation setFeatureLabelPatterns(diagramLabelName : String,
                                  editMethod : Any, editPattern : String,
                                  viewMethod : Any, viewPattern : String) {
  for (labelMapping in findLabelMappingsByName(diagramLabelName)) {
    labelMapping.editMethod    := editMethod;
    labelMapping.editPattern   := editPattern;
    labelMapping.editorPattern := editPattern;
    labelMapping.viewMethod  := viewMethod;
    labelMapping.viewPattern := viewPattern;
  }
}

operation removeLabel(diagramLabelName : String) {
  var diagLabels    := findDiagramLabelsByName(diagramLabelName);
  var labelMappings := findLabelMappingsByDiagramLabels(diagLabels);

  for (labelMapping in labelMappings) {
    if (labelMapping.isDefined()) {
      delete labelMapping;
    }
  }
  for (diagLabel in diagLabels) {
    if (diagLabel.accessor.isDefined()) {
      -- Composite figure: we only want to remove the child label
      delete diagLabel.accessor.figure;
      delete diagLabel.accessor;
    }
    else {
      -- The whole figure is the label: remove it
      delete diagLabel.figure;
    }
    delete diagLabel;
  }
}

operation findDiagramLabelsByName(labelName : String) : Collection {
  return GmfGraph!DiagramLabel.all.select(r|r.name = labelName);
}

operation findLabelMappingsByDiagramLabels(diagramLabels : Collection) : GmfMap!LabelMapping {
  return GmfMap!LabelMapping.all.select(r|diagramLabels.includes(r.diagramLabel));
}

operation findLabelMappingsByName(diagramLabelName : String) : GmfMap!LabelMapping {
  return findLabelMappingsByDiagramLabels(findDiagramLabelsByName(diagramLabelName));
}
