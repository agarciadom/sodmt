import '../../ServiceProcess/model/ECore2GMF.eol';

var MSGFMT_METHOD := GmfMap!LabelTextAccessMethod#MESSAGE_FORMAT;
var NATIVE_METHOD := GmfMap!LabelTextAccessMethod#NATIVE;

serviceProcessMainBody(Sequence {
    'CompositionStartLabel', 'CompositionFinishLabel',
    'CompositionForkLabel', 'CompositionJoinLabel',
    'CompositionDecisionLabel',
    'ActivityStartLabel', 'ActivityFinishLabel',
    'ActivityForkLabel', 'ActivityJoinLabel',
    'ActivityDecisionLabel',
    'ControlFlowConditionExternalLabel',
    'ServiceActivityAnnotationExternalLabel',
    'ActivityActionAnnotationExternalLabel',
    'SwimlaneContainerLabel'
  },
  Sequence {
    Sequence {'ActionPerformanceAnnotationManuallyAddedLabel', 'manual = {0}'},
    Sequence {'PerformanceAnnotationTransactionsPerSecLabel',
      'transactionsPerSec = {0}', NATIVE_METHOD, '{0,number}'},
    Sequence {'PerformanceAnnotationSecsTimeLimitLabel',
      'timeLimit = {0}', NATIVE_METHOD, '{0,number}'},
    Sequence {'CompositionControlFlowLabel', '[{0}] (p = {1})',
      NATIVE_METHOD, '{0} : {1,number}'},
    Sequence {'ActivityControlFlowLabel', '[{0}] (p = {1})',
      NATIVE_METHOD, '{0} : {1,number}'}
  },
  Sequence {
    'ControlFlowConditionLabel',
    'ActivityPerformanceAnnotationLabel',
    'ActionPerformanceAnnotationLabel',
    'ActionPerformanceAnnotationManuallyAddedLabel'
  },
  Sequence {
    'CompositionControlFlowLabelLabel',
    'ActivityControlFlowLabelLabel'
});

setSymmetricLinkConstraintsForLinkMapping('CompositionControlFlow',
  'self.oclIsKindOf(serviceComposition::CompositionFlowNode) and not self.oclIsKindOf(serviceComposition::ObjectNode)'
  + ' and self <> oppositeEnd');
setSymmetricLinkConstraintsForLinkMapping('ActivityControlFlow',
  'self.oclIsKindOf(serviceComposition::ActivityFlowNode) and not self.oclIsKindOf(serviceComposition::ObjectNode)'
  + ' and self <> oppositeEnd');
setSymmetricLinkConstraintsForLinkMapping('ActivityObjectFlow',
  '(self.oclIsKindOf(serviceComposition::ActivityFlowNode) and oppositeEnd.oclIsKindOf(serviceComposition::ObjectNode))'
  + ' or (self.oclIsKindOf(serviceComposition::ObjectNode) and oppositeEnd.oclIsKindOf(serviceComposition::ActivityFlowNode))'
  + ' and self <> oppositeEnd');
