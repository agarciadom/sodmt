«IMPORT 'http://www.eclipse.org/gmf/2009/GenModel'»

«AROUND cons FOR gmfgen::PredefinedParser»
    «IF className <> 'NumbersToDoubleParser' and className <> 'ControlFlowLabelParser'»
      «targetDef.proceed()»
    «ELSE»
        «EXPAND xpt::Common::generatedMemberComment»
        public «className»(org.eclipse.emf.ecore.EAttribute[] features) {
                super(features);
        }

        «EXPAND xpt::Common::generatedMemberComment»
        public «className»(org.eclipse.emf.ecore.EAttribute[] features, org.eclipse.emf.ecore.EAttribute[] editableFeatures) {
                super(features, editableFeatures);
        }
    «ENDIF»
«ENDAROUND»

«AROUND parser_getParseCommandMethod FOR gmfgen::PredefinedParser»
   «IF className <> 'NumbersToDoubleParser' and className <> 'ControlFlowLabelParser'»
     «targetDef.proceed()»
   «ELSE»
     «EXPAND xpt::Common::generatedMemberComment»
     public org.eclipse.gmf.runtime.common.core.command.ICommand getParseCommand(org.eclipse.core.runtime.IAdaptable adapter, String newString, int flags) {
                Object[] values = getEditorProcessor().parse(newString, new java.text.ParsePosition(0));
                for (int i = 0; i < values.length; ++i) {
                  if (values[i] instanceof Number) {
                    values[i] = new Double(((Number)values[i]).doubleValue());
                  }
                }
                return getParseCommand(adapter, values, flags);
     }
   «ENDIF»
«ENDAROUND»

«AROUND parser_getPrintStringMethod FOR gmfgen::PredefinedParser-»
  «IF className <> 'ControlFlowLabelParser'»
    «targetDef.proceed()»
  «ELSE»
     «EXPAND xpt::Common::generatedMemberComment»
     public String getPrintString(org.eclipse.core.runtime.IAdaptable adapter, int flags) {
        org.eclipse.emf.ecore.EObject element = (org.eclipse.emf.ecore.EObject) adapter.getAdapter(org.eclipse.emf.ecore.EObject.class);
		Object[] values = getValues(element);
		if (values.length > 0 && values[0] instanceof String && ((String)values[0]).trim().length() > 0) {
			return getViewProcessor().format(getValues(element),
					new StringBuffer(), new java.text.FieldPosition(0)).toString();
		}
		else return "";«EXPAND xpt::Common::nonNLS»
     }
  «ENDIF»
«ENDAROUND»
