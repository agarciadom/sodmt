[%
import 'platform:/plugin/es.uca.modeling.eol.marte/eol/model_utils.eol';
import 'platform:/plugin/es.uca.modeling.eol.marte/eol/utils.eol';

var root := Weaving!PerformanceRequirementLinks.all.first;

var needsFilterByClassRule := false;
var FBC_PACKAGE := 'sodmt.util';
var FBC_CLASS := 'FilterByClassRule';

for (link in root.links) {
  var klazz := link.klazz;
  var execNode := link.execNode;
  var timeLimit := execNode.getTimeLimit();
  var throughput := execNode.getThroughput();
  var className := execNode.className() + "PerformanceTest";
  var packageName := klazz.packageName();

  var template : Template;
  if (link.testMethods.isEmpty) {
    template := TemplateFactory.load("wrapAllTests.egl");
  } else {
    template := TemplateFactory.load("wrapSomeTests.egl");
    needsFilterByClassRule := true;
  }

  -- Weaving information
  template.populate("testSuite", klazz);
  template.populate("testCases", link.testMethods);
  template.populate("execNode", execNode);

  -- Performance test parameters
  template.populate("invocations", root.samplesPerTest);
  template.populate("threads", root.threads);
  template.populate("timeLimit", timeLimit);
  template.populate("throughput", throughput);

  -- Code parameters
  template.populate("packageName", packageName);
  template.populate("className", className);
  template.populate("fbc_packageName", FBC_PACKAGE);
  template.populate("fbc_className", FBC_CLASS);

  -- Generate the actual Java code
  template.generate(sourcePath(root.baseDir, packageName, className));
}

if (needsFilterByClassRule) {
  -- Do we need this helper class?
  var template := TemplateFactory.load("filterByClassRule.egl");
  var className := FBC_CLASS;
  var packageName := FBC_PACKAGE;
  template.populate("className", className);
  template.populate("packageName", packageName);
  template.generate(sourcePath(root.baseDir, packageName, className));
}

operation sourcePath(baseDir : String, package : String, class : String) : String {
  var path = baseDir + "/";
  if (package.isDefined() and package.length() > 0) {
    path = path + package.replaceAll("\\.", "/") + "/";
  }
  return path + class + ".java";
}

operation ExecutableNode className() {
  return self.name.replace('\\s', '');
}

operation AbstractTypeDeclaration packageName() {
  var packages := Sequence {};
  var current := self.package;
  while (current.isDefined()) {
    packages.add(current.name);
    current := current.package;
  }
  return packages.invert.concat(".");
}

%]
