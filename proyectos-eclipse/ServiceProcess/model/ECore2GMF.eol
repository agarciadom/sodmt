-- Remove labels from nodes which don't need them ------------------

for (n in Sequence {
            'InitialNodeLabel', 'FinalNodeLabel',
            'ForkNodeLabel', 'JoinNodeLabel',
            'DecisionNodeLabel',
            'ControlNodeEdgeConditionExternalLabel',
            'ExecutableNodeAnnotationExternalLabel'}) {
   removeLabel(n);
}

for (name in Sequence {'ServiceActivityTransactionsPerSecLabelFigure',
                       'ServiceActivitySecsTimeLimitLabelFigure'}) {
  var label := GmfGraph!Label.all.selectOne(r | r.name=name);
  label.maximumSize := new GmfGraph!Dimension;
  label.maximumSize.dx := 10000;
  label.maximumSize.dy := 50;
}

operation removeLabel(diagramLabelName : String) {
  var diagLabels    := findDiagramLabelsByName(diagramLabelName);
  var labelMappings := findLabelMappingsByDiagramLabels(diagLabels);

  for (labelMapping in labelMappings) {
    if (labelMapping.isDefined()) {
      delete labelMapping;
    }
  }
  for (diagLabel in diagLabels) {
    if (diagLabel.accessor.isDefined()) {
      -- Composite figure: we only want to remove the child label
      delete diagLabel.accessor.figure;
      delete diagLabel.accessor;
    }
    else {
      -- The whole figure is the label: remove it
      delete diagLabel.figure;
    }
    delete diagLabel;
  }
}

operation findDiagramLabelsByName(labelName : String) : Collection {
  return GmfGraph!DiagramLabel.all.select(r|r.name = labelName);
}

operation findLabelMappingsByDiagramLabels(diagramLabels : Collection) : GmfMap!LabelMapping {
  return GmfMap!LabelMapping.all.select(r|diagramLabels.includes(r.diagramLabel));
}

operation findLabelMappingsByName(diagramLabelName : String) : GmfMap!LabelMapping {
  return findLabelMappingsByDiagramLabels(findDiagramLabelsByName(diagramLabelName));
}
