@namespace(uri="www.uca.es/modeling/serviceComposition", prefix="sc")
package serviceComposition;

/*
  Note: servicecomposition.emf is generated automatically from ServiceProcess'
  model/common.emf.fragment and this project's servicecomposition.emf.template.
  Please edit those files instead of servicecomposition.emf.
*/

@gmf.diagram(foo="bar")
class ServiceComposition {
  val CompositionFlowNode[*] nodes;
  val CompositionFlowEdge[*] compositionEdges;
  val ActivityFlowEdge[*]    activityEdges;
  val SwimlaneContainer swimlanes;
  val ActivityPerformanceAnnotation[*] activityPerformance;
}

/* Marker class for all nested elements in an activity */
abstract class ActivityElement {
  ref ServiceActivity#nodes activity;
}

abstract class CompositionFlowEdge extends FlowEdge {}
abstract class CompositionFlowNode extends FlowNode {}
abstract class ActivityFlowEdge    extends FlowEdge {}
abstract class ActivityFlowNode    extends ActivityElement, FlowNode {}

/* SWIMLANES */

@gmf.node(label="swimlanes",figure="es.uca.modeling.figures.SwimlanesFigure",tool.name="Swimlanes",size="600,300")
class SwimlaneContainer {
  attr String[*] swimlaneNames;
}

/* ANNOTATIONS */

@gmf.node(label.pattern="<<sapc>>",
          tool.name="Service Activity Performance Constraint")
class ActivityPerformanceAnnotation extends PerformanceAnnotation {
   ref ServiceActivity#annotation execNode;
}

@gmf.node(label.pattern="<<apc>>",
          tool.name="Action Performance Constraint")
class ActionPerformanceAnnotation extends ActivityElement, LocalPerformanceAnnotation {
  ref ActivityAction#annotation action;
  @gmf.label(label.readOnly="true")
  attr boolean manuallyAdded = true;
}

/* EDGES */

@gmf.link(tool.name="Composition Control Flow")
class CompositionControlFlow extends CompositionFlowEdge, ControlFlow {}

@gmf.link(tool.name="Composition Object Flow")
class CompositionObjectFlow extends CompositionFlowEdge, ObjectFlow {}

@gmf.link(tool.name="Activity Control Flow")
class ActivityControlFlow    extends ActivityFlowEdge, ControlFlow {}

@gmf.link(tool.name="Activity Object Flow")
class ActivityObjectFlow     extends ActivityFlowEdge, ObjectFlow {}

/* OUTER NODES */

@gmf.node(tool.name="Service Activity", figure="rounded")
class ServiceActivity extends CompositionFlowNode, Activity {
  @gmf.link(label="performance", style="dash",
            tool.name="Link Activity Performance Annotation")
  ref ActivityPerformanceAnnotation#execNode annotation;

  @gmf.compartment(layout="free")
  val ActivityElement[*]#activity nodes;
}

@gmf.node(tool.name="Composition Start")
class CompositionStart    extends CompositionFlowNode, InitialNode {}

@gmf.node(tool.name="Composition Finish")
class CompositionFinish   extends CompositionFlowNode, FinalNode {}

@gmf.node(tool.name="Composition Decision")
class CompositionDecision extends CompositionFlowNode, DecisionNode {}

@gmf.node(tool.name="Composition Fork")
class CompositionFork     extends CompositionFlowNode, ForkNode {}

@gmf.node(tool.name="Composition Join")
class CompositionJoin     extends CompositionFlowNode, JoinNode {}

@gmf.node(tool.name="Composition Object Node")
class CompositionObjectNode  extends CompositionFlowNode, ObjectNode {}

/* INNER NODES */

@gmf.node(tool.name="Activity Action")
class ActivityAction extends ActivityFlowNode, Activity {
   @gmf.link(label="performance", style="dash",
            tool.name="Link Action Performance Annotation")
  ref ActionPerformanceAnnotation#action annotation;
}

@gmf.node(tool.name="Activity Start")
class ActivityStart    extends ActivityFlowNode, InitialNode {}

@gmf.node(tool.name="Activity Finish")
class ActivityFinish   extends ActivityFlowNode, FinalNode {}

@gmf.node(tool.name="Activity Decision")
class ActivityDecision extends ActivityFlowNode, DecisionNode {}

@gmf.node(tool.name="Activity Fork")
class ActivityFork     extends ActivityFlowNode, ForkNode {}

@gmf.node(tool.name="Activity Join")
class ActivityJoin     extends ActivityFlowNode, JoinNode {}

@gmf.node(tool.name="Activity Object Node")
class ActivityObjectNode     extends ActivityFlowNode, ObjectNode {}

/*@COMMON_FRAGMENT@*/