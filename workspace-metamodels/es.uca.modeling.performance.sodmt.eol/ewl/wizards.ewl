import '../eol/concurrent_users.eol';
import '../eol/time_limits_glpk.eol';
import '../eol/time_limits_new.eol';
import '../eol/time_limits.eol';

wizard InferTimeLimitsNew {
  title : 'Infer performance annotations'
  do {
    transaction {
      for (start in InitialNode.all.sortBy(i | i.getNestingLevel())) {
        var finalSiblings =
          start.eContainer.nodes.select(n | n.isKindOf(FinalNode));
        if (not distributeTime(start.getGlobalTimeLimit(), finalSiblings)
            or not annotateConcurrentUsers(start)) {
          abort;
          return;
        }
      }
    } -- transaction
  } -- do
}

wizard InferPerformanceAnnotations {
  title : 'Infer time limits (old algorithm)'
  do {
    transaction {
      for (start in InitialNode.all.sortBy(i | i.getNestingLevel())) {
        if (not annotateTimeLimits(start.getGlobalTimeLimit(), start)) {
          abort;
          return;
        }
      }
    } -- transaction
  } -- do
}

wizard GenGLPK {
  guard : self.isKindOf(ActivityNode)
  title : 'Generate glpsol model...'
  do {
    var glpkTool = new Native('es.uca.modeling.performance.sodmt.egl.glpk.GLPKInputGen');
    glpkTool.generate(self);
  }
}

wizard RunGLPK {
  guard : self.isKindOf(ActivityNode)
  title : 'Infer time limits (GLPK)'
  do {
    distributeTimeGlpsol(self);
  }
}
