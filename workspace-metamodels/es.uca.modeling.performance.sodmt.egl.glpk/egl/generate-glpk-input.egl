[% import 'platform:/plugin/es.uca.modeling.performance.sodmt.eol/eol/utils.eol'; %]
# Activities and path names
set A;
set P;

# Global time limit
param G;

# Minimum times, weights and repetitions
param m{a in A}, default 0;
param w{a in A}, default 1;
param r{a in A}, default 1;

# Paths (activity belongs in an activity)
param paths{a in A, p in P}, default 0, binary;

# Minimum time and total weight of each path
param mp{p in P} := sum{a in A} paths[a, p] * m[a] * r[a];
param tw{p in P} := sum{a in A} paths[a, p] * w[a] * r[a];

# Minimum slack per unit of weight by task
param msuw{a in A} := min{p in P: paths[a, p] == 1 && tw[p] > 0} (G-mp[p])/tw[p];

# Slack per unit of weight for each activity (must be positive)
var suw{a in A} >= 0;

# Objective function: use as much time as possible over all paths (honoring minimum times, weights and repetitions)
maximize usage: sum{a in A, p in P} (paths[a, p] * (suw[a]*w[a] + m[a]) * r[a]);

# Global time limit on paths
s.t. glpath 'global limit on path' {p in P}: sum{a in A} (paths[a, p] * (suw[a] * w[a] + m[a]) * r[a]) <= G;

# Minimum slack restriction on paths which are not inside any activity
s.t. minslackg 'min slack: global' {a in A}: suw[a] >= msuw[a];

# Activities on all the same paths must have the same SUW
s.t. lsetpaths 'same paths' {a in A, b in A: a < b && forall {p in P} paths[a, p] == paths[b, p]}: suw[a] == suw[b];

solve;

# Print the solution so it can be easily retrieved
printf "\nBEGIN_SUW\n";
for {a in A} {
  printf "%s\t%g\n", a, suw[a];
}
printf "END_SUW\n\n";

data;

[%
  -- this template receives one argument (selected: the InitialNode from which we want to launch the computation)
  var allTasks : Set;
  var allPaths : Set;

  for (seq in getAllExecutionPathsFrom(selected)) {
    var execNodes = seq.select(t | t.isKindOf(ExecutableNode)).asSequence();
    if (execNodes.isEmpty()) {
      continue;
    }

	allTasks.addAll(execNodes);
    allPaths.add(execNodes);
  }
%]

set A := [%=allTasks.collect(t | '"' + t.name + '"').concat(', ')%];

set P := [%=allPathIdentifiers(allPaths.size)%];

param G := [%=selected.getGlobalTimeLimit()%];

param m :=
[% for (task in allTasks) { if (task.getMinimumTime() <> 0) {%]
  "[%=task.name%]"	[%=task.getMinimumTime()%]
[% }} %];

param w :=
[% for (task in allTasks) { if (task.getWeight() <> 1) {%]
  "[%=task.name%]" [%=task.getWeight()%]
[% }} %];

param r :=
[% for (task in allTasks) { if (task.getRepetitions() <> 1) {%]
  "[%=task.name%]" [%=task.getRepetitions()%]
[% }} %];

param paths :=
[% var pathCounter = 1; for (path in allPaths) { %]
  [%='[' + '*, p_' + pathCounter + '] ' + path.collect(t | '"' + t.name + '" 1').concat(' ')%]
[% pathCounter = pathCounter + 1; } %];

end;

[%
operation allPathIdentifiers(n: Integer): String {
  return 1.to(n).collect(x | 'p_' + x).concat(' ');
}
%]