@namespace(uri="www.uca.es/modeling/serviceProcess", prefix="sp")
package serviceProcess;

/*
  Note: do not edit serviceprocess.emf, as it is generated automatically
  from the serviceprocess.emf.template and common.emf.fragment files.
*/

@gmf.diagram(foo="bar")
class ServiceProcess {
  val ProcessFlowNode[*] nodes;
  val ProcessFlowEdge[*] edges;
  val ActivityPerformanceAnnotation[*] activityPerformance;
  val ProcessPerformanceAnnotation processPerformance;
}

@gmf.link(source="source", target="target", width="3")
abstract class ProcessFlowEdge extends FlowEdge {}

abstract class ProcessFlowNode extends FlowNode {}

/* ANNOTATIONS */

@gmf.node(label.pattern="<<sapc>>",
          tool.name="Service Activity Performance Constraint")
class ActivityPerformanceAnnotation extends LocalPerformanceAnnotation {
   ref ServiceActivity#annotation execNode;
   @gmf.label(label.readOnly="true")
   attr boolean manuallyAdded = true;
}

@gmf.node(label.pattern="<<sppc>>",          
          tool.name="Service Process Performance Constraint")
class ProcessPerformanceAnnotation extends PerformanceAnnotation {}

/* EDGES */

class ProcessControlFlow extends ProcessFlowEdge, ControlFlow {}

/* NODES */

@gmf.node(tool.name="Service Activity")
class ServiceActivity extends ProcessFlowNode, Activity {
  @gmf.link(label="performance", style="dash",
            tool.name="Link Performance Annotation")
  ref ActivityPerformanceAnnotation#execNode annotation;
}
class ProcessStart    extends ProcessFlowNode, InitialNode {}
class ProcessFinish   extends ProcessFlowNode, FinalNode {}
class ProcessDecision extends ProcessFlowNode, DecisionNode {}
class ProcessFork     extends ProcessFlowNode, ForkNode {}
class ProcessJoin     extends ProcessFlowNode, JoinNode {}

/********************************************************************
  common.emf.fragment: shared Emfatic code to be included in the
  ServiceProcess and ServiceComposition models.
 ********************************************************************/

/* DATATYPES */

enum ExpressionLanguage {
   OCL;
   JML;
}

/* Visit status for nodes: needed for the colored depth-first search
   used to detect cycles in the graph in the EVL script. */
enum VisitStatus {
   NOT_VISITED;
   VISITING;
   VISITED;
}

/* Node side: useful for operations which need to distinguish between the
   incoming side and the outgoing side */
enum NodeSide {
   INCOMING;
   OUTGOING;
}

/****** ABSTRACT ANNOTATED CONTROL GRAPH MODEL *******************************/

/* PERFORMANCE ANNOTATIONS */

@gmf.node(label="concurrentUsers",figure="rectangle")
abstract class PerformanceAnnotation {
   @gmf.label(foo="bar")
   attr Double concurrentUsers = 1;
   @gmf.label(label.readOnly="true")
   attr Double secsTimeLimit = 0;
}

abstract class LocalPerformanceAnnotation extends PerformanceAnnotation {
   @gmf.label(foo="bar")
   attr Double minimumTime = 0;
   @gmf.label(foo="bar")
   attr Double weight = 1;
}

/* EDGES */

abstract class FlowNode {
  ref FlowEdge[*]#target incoming;
  ref FlowEdge[*]#source outgoing;
}

@gmf.link(source="source", target="target", width="3")
abstract class FlowEdge {
  ref FlowNode#incoming target;
  ref FlowNode#outgoing source;
}

@gmf.link(target.decoration="arrow",
          tool.name="Control Flow",
          label="condition,probability")
abstract class ControlFlow extends FlowEdge {
    attr String condition = "";
    attr Double probability = 1;
}

@gmf.link(style="dash",target.decoration="arrow",tool.name="Object Flow")
abstract class ObjectFlow extends FlowEdge {}

/* NODES */

@gmf.node(label="name")
abstract class NamedElement {
   attr String name;
}

@gmf.node(figure="es.uca.modeling.figures.CapsuleFigure",
          label.icon="false", tool.name="Executable Node")
abstract class Activity extends FlowNode, NamedElement {}

@gmf.node(figure="rectangle", label.icon="false", tool.name="Object Node")
abstract class ObjectNode extends FlowNode, NamedElement {}

@gmf.node(figure="es.uca.modeling.figures.FgFilledCircleFigure", border.color="0,0,0",
          size="30,30", tool.name="Start")
abstract class InitialNode extends FlowNode {}

@gmf.node(figure="es.uca.modeling.figures.FgBgFilledCircleFigure", border.color="0,0,0",
          size="30,30", tool.name="Finish")
abstract class FinalNode extends FlowNode {}

@gmf.node(figure="es.uca.modeling.figures.FgFilledRectangleFigure", border.color="0,0,0",
          size="15,30", tool.name="Fork")
abstract class ForkNode extends FlowNode {}

@gmf.node(figure="es.uca.modeling.figures.FgFilledRectangleFigure", border.color="0,0,0",
          size="15,30", tool.name="Join")
abstract class JoinNode extends FlowNode {}

@gmf.node(figure="es.uca.modeling.figures.DiamondFigure", border.color="0,0,0", size="30,30",
          tool.name="Decision")
abstract class DecisionNode extends FlowNode {}

