-- Make InitialNode not resizable
makeNotResizable('figures.InitialNodeFigure');
setDefaultSize('figures.InitialNodeFigure', 30, 30);

makeNotResizable('figures.FinalNodeFigure');
setDefaultSize('figures.FinalNodeFigure', 30, 30);

makeNotResizable('figures.ForkJoinNodeFigure');
setDefaultSize('figures.ForkJoinNodeFigure', 5, 30);

operation makeNotResizable(figureClass : String) {
  var figure_viewmaps = GmfGen!FigureViewmap.all
    .select(r|r.figureQualifiedClassName = figureClass);
  
  for (figure_viewmap in figure_viewmaps) {
    -- Check whether the constraint was already added
    if (figure_viewmap
        .attributes
        .exists(r : GmfGen!ResizeConstraints | r.nonResizeHandles = 31)) {
      continue;
    }

    -- Resize constraint which forbids resizing
    -- NORTH (1), SOUTH (4), EAST (8) and WEST (16): all handles are not resizable
    var resizeconstraint_not_resizable = new GmfGen!ResizeConstraints;
    resizeconstraint_not_resizable.nonResizeHandles := 31;

    figure_viewmap.attributes.add(resizeconstraint_not_resizable);
  }
}

operation setDefaultSize(figureClass : String, width : Integer, height : Integer) {
  var figure_viewmaps = GmfGen!FigureViewmap.all
    .select(r|r.figureQualifiedClassName = figureClass);
  
  for (figure_viewmap in figure_viewmaps) {
    if (figure_viewmap
        .attributes
        .exists(r : GmfGen!DefaultSizeAttributes | true)) {
        continue;
     }
     
     var default_size = new GmfGen!DefaultSizeAttributes;
     default_size.width := width;
     default_size.height := height;
     figure_viewmap.attributes.add(default_size);
  }
}
