// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.uca.b2mml.domain.psegment;

import es.uca.b2mml.domain.psegment.ProcessSegmentParameter;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect ProcessSegmentParameter_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager ProcessSegmentParameter.entityManager;
    
    public static final EntityManager ProcessSegmentParameter.entityManager() {
        EntityManager em = new ProcessSegmentParameter().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long ProcessSegmentParameter.countProcessSegmentParameters() {
        return entityManager().createQuery("SELECT COUNT(o) FROM ProcessSegmentParameter o", Long.class).getSingleResult();
    }
    
    public static List<ProcessSegmentParameter> ProcessSegmentParameter.findAllProcessSegmentParameters() {
        return entityManager().createQuery("SELECT o FROM ProcessSegmentParameter o", ProcessSegmentParameter.class).getResultList();
    }
    
    public static ProcessSegmentParameter ProcessSegmentParameter.findProcessSegmentParameter(Long id) {
        if (id == null) return null;
        return entityManager().find(ProcessSegmentParameter.class, id);
    }
    
    public static List<ProcessSegmentParameter> ProcessSegmentParameter.findProcessSegmentParameterEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM ProcessSegmentParameter o", ProcessSegmentParameter.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void ProcessSegmentParameter.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void ProcessSegmentParameter.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            ProcessSegmentParameter attached = ProcessSegmentParameter.findProcessSegmentParameter(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void ProcessSegmentParameter.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void ProcessSegmentParameter.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public ProcessSegmentParameter ProcessSegmentParameter.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        ProcessSegmentParameter merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
