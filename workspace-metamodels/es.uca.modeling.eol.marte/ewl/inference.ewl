import '../eol/throughput.eol';
import '../eol/time_limits.eol';

wizard SetGlobalConstraints {
  guard : self.isKindOf(Activity)
  title : 'Set global constraints'
  do {
    transaction {
      var globalTimeLimit := self.getTimeLimitWithDefault(10.0d);
      var globalThroughput := self.getThroughputWithDefault(1.0d);

      globalTimeLimit := System.user.promptReal("Please enter the global time limit (in seconds)", globalTimeLimit);
      globalThroughput := System.user.promptReal("Please enter the global throughput (in requests/second)", globalThroughput);

      self.setTimeLimit(globalTimeLimit);
      self.setThroughput(globalThroughput);
    }
  }
}

wizard InferTimeLimits {
  guard : self.isKindOf(Activity) and self.getScenario().isDefined()
  title : 'Infer time limits'
  do {
    transaction {
      var finalNodes := self.getSinks();
      if (not distributeTime(self.getTimeLimit(), finalNodes)) {
        abort;
        return;
      }
    } -- transaction
  } -- do
} -- wizard

wizard InferThroughput {
  guard : self.isKindOf(Activity) and self.getScenario().isDefined()
  title : 'Infer throughput'
  do {
    transaction {
      var initialNode := self.getSources();
      if (initialNode.size() <> 1) {
        System.user.inform('There should only be one source');
        abort;
        return;
      }
      if (not annotateThroughput(initialNode.first)) {
        abort;
        return;
      }
    } -- transaction
  } -- do
} -- wizard

wizard UpdatePartitionNames {
  guard : self.isKindOf(Activity)
  title : 'Decorate with partition names'
  do {
    for (exec in self.node.select(n|n.isKindOf(ExecutableNode))) {
      exec.updateNameWithPartitions();
    }
  }
}

-*
    ExecutableNode wizards
*-

wizard SetTimeLimit {
  guard : self.isKindOf(ExecutableNode)
  title : 'Set time limit expression'
  do {
    transaction {
      var minTime := System.user.promptReal("Please enter the minimum time (in seconds) for \"" + self.name + "\":", self.getMinimumTime());
      if (minTime.isUndefined()) {
        abort; return;
      }

      var weight := System.user.promptReal("Please enter the weight for \"" + self.name + "\":", self.getWeight());
      if (weight.isUndefined()) {
        abort; return;
      }

      self.setRequiredTimeLimit(minTime, weight);
    }
  }
}

wizard SetRepetitions {
  guard : self.isKindOf(ExecutableNode)
  title : 'Set repetitions'
  do {
    transaction {
      var reps := System.user.promptReal("Please enter the number of repetitions for \"" + self.name + "\":", self.getRepetitions());
      if (reps.isUndefined()) {
        abort; return;
      }
      self.setRepetitions(reps);
    }
  }
}

wizard SetPartitions {
  guard : self.isKindOf(ExecutableNode)
  title : 'Set activity partitions'
  do {
    var activity = self.getActivity();
    var allPartitionsByName : Map;
    for (partition in activity.`group`.select(g|g.isKindOf(ActivityPartition))) {
      allPartitionsByName.put(partition.name, partition);
    }

    var allPartitionNames := allPartitionsByName.keySet().asSequence();
    var currentPartitionNames := self.inPartition.collect(p|p.name);
    var selectedPartitions := System.user.chooseMany('Choose the activity partitions for "' + self.name + '"', allPartitionNames, currentPartitionNames);

    self.inPartition.clear();
    for (selected in selectedPartitions) {
      self.inPartition.add(allPartitionsByName.get(selected));
    }

    self.updateNameWithPartitions();
  }
}

-*
  DecisionNode wizards
*-

wizard SetProbabilityBranches {
  guard : self.isKindOf(DecisionNode) and self.outgoing.size > 1
  title : 'Set probabilities'
  do {
    transaction {
      var sum := 0.0d;
      for (edge in self.outgoing) {
        var prob = 0;
        while (prob <= 0 or prob > 1) {
           prob = System.user.promptReal("Please enter a probability within (0, 1] for \"" + edge.getGuard() + "\"", edge.getProbability());
           if (prob.isUndefined()) {
             abort; return;
           }
        }
        edge.setProbability(prob);

        sum = sum + prob;
      }

      if (sum > 1.0d) {
        System.user.inform("Sum of probabilities exceeded 1. Aborting wizard.");
        abort; return;
      }
      else if (sum < 0.999999d) {
        System.user.inform("Sum of probabilities was not equal to 1. Aborting wizard.");
        abort; return;
      }
    }
  }
}
