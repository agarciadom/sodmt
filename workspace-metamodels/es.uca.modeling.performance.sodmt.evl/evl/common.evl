import 'platform:/plugin/es.uca.modeling.performance.sodmt.eol/eol/utils.eol';

-- Common constraints

context ActivityNode {

  constraint MinimumOneIncoming {
    guard : not self.isKindOf(InitialNode) and not self.isKindOf(PerformanceAnnotation) and not self.isKindOf(ObjectNode)
    check : self.incoming.select(i | i.isKindOf(ControlFlow)).size() >= 1
    message : 'All activity nodes except initial nodes must have at least one incoming control flow'
  }

  constraint MaximumOneIncoming {
    guard : not self.isKindOf(JoinNode)
            and InitialNode.all.forAll(r|r.satisfies('NoCyclesCompleteGraph'))
    check : self.incoming.select(i | i.isKindOf(ControlFlow)).size() <= 1
    message : 'All activity nodes except joins must have at most one incoming control flow'
    fix {
      title : 'Add join node in the middle'
      do {
        var newJoin := self.newJoinNode();
        self.placeNodeBetween(newJoin, NodeSide#INCOMING);
      }
    }
  }

  -- See above comment for an explanation of why we use both min and max
  -- constraints instead of just one
  constraint MinimumOneOutgoing {
    guard : not self.isKindOf(FinalNode) and not self.isKindOf(PerformanceAnnotation) and not self.isKindOf(ObjectNode)
    check : self.outgoing.select(i | i.isKindOf(ControlFlow)).size() >= 1
    message : 'All activity nodes except final nodes must have at least one outgoing control flow'
  }

  constraint MaximumOneOutgoing {
    guard : not self.isKindOf(ForkNode)
            and not self.isKindOf(DecisionNode)
            and InitialNode.all.forAll(r|r.satisfies('NoCyclesCompleteGraph'))
    check : self.outgoing.select(i | i.isKindOf(ControlFlow)).size() <= 1
    message : 'All activity nodes except forks and decisions must have at most one outgoing control flow'
    fix {
      title : 'Add fork node in the middle'
      do {
        var newFork := self.newForkNode();
        self.placeNodeBetween(newFork, NodeSide#OUTGOING);
      }
    }
    fix {
      title : 'Add decision node in the middle'
      do {
        var newDecision := self.newDecisionNode();
        self.placeNodeBetween(newDecision, NodeSide#OUTGOING);
      }
    }
  }
}

-- Flow constraints -------------------------------

context ActivityEdge {
  constraint BothEndsDefined {
    check : self.source.isDefined() and self.target.isDefined()
    message : 'Source and target of an edge must be defined'
  }

  constraint NoSelfCycles {
    check : self.source <> self.target
    message : 'Source and target of an edge must not be the same'
    fix {
      title : 'Remove link from model'
      do {
        delete self;
      }
    }
  }
}

context ControlFlow {
  constraint ConditionsOnlyFromDecisionNode {
    check : self.condition <> '' implies self.source.isKindOf(DecisionNode)
    message : 'Conditions can only be applied to edges starting from a decision node'
    fix {
      title : 'Remove condition'
      do {
        self.condition := '';
      }
    }
  }

  constraint ConditionsAlwaysFromDecisionNode {
    check : self.source.isKindOf(DecisionNode) implies self.condition <> ''
    message : 'Conditions must be applied to edges starting from a decision node'
    fix {
      title : 'Add dummy condition'
      do {
        self.condition := 'dummy';
      }
    }
  }

  constraint ValidProbabilityWithCondition {
    guard : self.satisfies('ConditionsOnlyFromDecisionNode')
            and self.satisfies('ConditionsAlwaysFromDecisionNode')
            and self.condition <> ''
    check : self.probability > 0 and self.probability < 1
    message : 'Condition must be true with probability > 0 and < 1'
  }

  constraint ValidProbabilityWithoutCondition {
    guard : self.satisfies('ConditionsOnlyFromDecisionNode')
            and self.satisfies('ConditionsAlwaysFromDecisionNode')
            and self.condition = ''
    check : (self.probability - 1).abs() <= 0.001
    message : 'Unconditional control flows should have probability equal to 1'
    fix {
      title : 'Set probability to 1'
      do {
        self.probability = 1.0d;
      }
    }
  }

  constraint SourceMustNotBeObjectNode {
    guard : self.source.isDefined()
    check : not self.source.isKindOf(ObjectNode)
    message : 'The source of a control flow cannot be an object node'
  }

  constraint TargetMustNotBeObjectNode {
    guard : self.target.isDefined()
    check : not self.target.isKindOf(ObjectNode)
    message : 'The target of a control flow cannot be an object node'
  }
}

context ObjectFlow {
  constraint EitherSourceOrTargetMustBeObjectNode {
    guard : self.source.isDefined() and self.target.isDefined()
    check : self.source.isKindOf(ObjectNode) xor self.target.isKindOf(ObjectNode)
    message : 'Either the source or the target of an object flow must be an object node, but not both'
  }

  constraint EitherSourceOrTargetMustBeExecutableNode {
    guard : self.source.isDefined() and self.target.isDefined()
    check : self.source.isKindOf(ExecutableNode) xor self.target.isKindOf(ExecutableNode)
    message : 'Either the source or the target of an object flow must be an executable node, but not both'
  }
}

-- Annotation constraints -------------------------

context PerformanceAnnotation {
  constraint ValidConcurrentUsers {
    check : self.concurrentUsers > 0
    message : 'Transactions per sec must be greater than 0'
  }

  constraint ValidGlobalTimeLimit {
    guard : not self.isKindOf(ActivityNode)
    check : self.secsTimeLimit > 0
    message : 'Global time limit must be greater than 0'
  }
}

context LocalPerformanceAnnotation {
  constraint IsLinkedToNode {
    check : self.execNode.isDefined()
    message : 'The annotation must be linked to an executable node'
  }

  constraint ValidMinTime {
    check : self.minimumTime >= 0
    message : 'The minimum time for a single activity must be greater or equal than 0'
  }

  constraint ValidWeight {
    check : self.weight >= 0
    message : 'The weight for a single activity must be greater or equal than 0'
  }

  constraint NoIncomingForPerformanceAnnotation {
    check : self.incoming.isEmpty()
    message : 'Performance annotations should not have any incoming activity edges'
    fix {
      title : 'Remove incoming activity edges'
      do {
        for (e in self.incoming.clone()) {
          delete e;
        }
      }
    }
  }

  constraint NoOutgoingForPerformanceAnnotation {
    check : self.outgoing.isEmpty()
    message : 'Performance annotations should not have any outgoing activity edges'
    fix {
      title : 'Remove outgoing activity edges'
      do {
        for (e in self.outgoing.clone()) {
          delete e;
        }
      }
    }
  }
}

-- Node constraints -----------------------------

context InitialNode {

  constraint AllPathsFromInitialNodeMustEndInFinalNode {
    guard : self.satisfies('NoCyclesCompleteGraph')
    check : getAllExecutionPathsFrom(self).forAll(r|r.last().isKindOf(FinalNode))
    message : 'All paths from an initial node must end in a final node'
  }

  constraint NoIncomingForInitialNode {
    check : self.incoming.isEmpty()
    message : 'The initial node must not have any incoming edges'
    fix {
      title : 'Remove incoming edges from initial node'
      do {
        for (e in self.incoming.clone()) {
          delete e;
        }
      }
    }
  }

  constraint AtLeastOneActivityNodeBetweenInitialAndFinalNodes {
    guard : self.satisfies('MaximumOneOutgoing')
    check : self.outgoing.forAll(e| not e.target.isKindOf(FinalNode))
    message : 'There must be at least one activity node between the initial '
              + 'node and the final node'
    fix {
      title : 'Add dummy executable node'
      do {
        var newExec = self.newExecutableNode();
        newExec.name := 'Do something';
        self.placeNodeBetween(newExec, NodeSide#OUTGOING);
      }
    }
  }

  constraint NoCyclesCompleteGraph {
    check : graphIsAcyclic(self)
    message : 'Starting from the initial node, the graph cannot contain any cycles'
    fix {
      title : 'Remove one of the edges of the cycle'
      do {
        delete self.~firstEdgeProducingCycle;
      }
    }
  }
}

context FinalNode {
  constraint NoOutgoingForFinalNode {
    check : self.outgoing.isEmpty()
    message : 'The final node must not have any outgoing edges'
    fix {
      title : 'Remove outgoing edges from final node'
      do {
        for (e in self.outgoing.clone()) {
          delete e;
        }
      }
    }
  }
}

context NamedElement {
  constraint NameMustNotBeEmpty {
    check : self.name.isDefined() and self.name <> ''
    message : 'The name of a named element must not be empty'
  }
}

context ForkNode {
  constraint MoreThanOneOutgoingFlowWithFix {
    guard : self.satisfies('MinimumOneIncoming')
            and self.satisfies('MinimumOneOutgoing') 
    check : self.outgoing.size() > 1
    message : 'A fork node must have more than one outgoing edge'
    fix {
      title : 'Convert fork node and edges into a single edge'      
      do {
        self.incoming.first.target := self.outgoing.first.target;
        delete self.outgoing.first;
        delete self;
      }
    }
  }
}

context JoinNode {
  constraint MoreThanOneIncomingFlow {
    guard : self.satisfies('MinimumOneIncoming')
            and self.satisfies('MinimumOneOutgoing')   
    check : self.incoming.size() > 1
    message : 'A join node must have more than one incoming edge'
    fix {
      title : 'Convert join node and edges into a single edge'
      do {
        self.incoming.first.target := self.outgoing.first.target;
        delete self.outgoing.first;
        delete self;
      }
    }
  }
  constraint JoinedBranchesMustPairwiseHaveSameLCA {
    guard : self.satisfies('MoreThanOneIncomingFlow')
            and InitialNode.all.forAll(r|r.satisfies('NoCyclesCompleteGraph'))
    check {
      var parents := self.incoming.collect(r|r.source);
      var nElems  := parents.size();
      var iFirst  := 0;
      var lca;
      while (iFirst < nElems) {
        var first   := parents.at(iFirst);
        var iSecond := iFirst + 1;
        while (iSecond < nElems) {
          var second := parents.at(iSecond);
          var currentLca := getLCA(first, second);
          if (not currentLca.isDefined() or (lca.isDefined() and lca <> currentLca)) {
            return false;
          }
          lca     := currentLca;
          iSecond := iSecond + 1;
        }
        iFirst := iFirst + 1;
      }
      return true;
    }
    message : 'A join node must only join branches which split off from the exact same node'
  }
}

context DecisionNode {
  constraint TotalProbabilityIsOne {
    guard : self.outgoing.forAll(r|r.satisfies('ValidProbabilityWithCondition'))
    check {
      var totalProb := 0;
      for (out in self.outgoing) {
        totalProb := totalProb + out.probability;
      }
      var delta := (1 - totalProb).abs();
      return delta <= 0.001;
    }
    message : 'The sum of the probabilities of all the decision outcomes must be equal to 1'
  }
}

context ObjectNode {
  constraint MinimumOneIncomingObjectFlow {
    check : self.incoming.select(i|i.isKindOf(ObjectFlow)).size() >= 1
    message : 'Object nodes must have one or more incoming object flows'
  }
  constraint MinimumOneOutgoingObjectFlow {
    check : self.outgoing.select(i|i.isKindOf(ObjectFlow)).size() >= 1
    message : 'Object nodes must have one or more outgoing object flows'
  }

  constraint NoIncomingControlFlows {
    check : self.incoming.select(i|i.isKindOf(ControlFlow)).isEmpty()
    message : 'Object nodes should not have any incoming control flows'
    fix {
      title : 'Remove all incoming control flows'
      do {
        for (cf in self.incoming.select(i|i.isKindOf(ControlFlow))) {
          delete cf;
        }
      }
    }
  }
  constraint NoOutgoingControlFlows {
    check : self.outgoing.select(i|i.isKindOf(ControlFlow)).isEmpty()
    message : 'Object nodes should not have any outgoing control flows'
    fix {
      title : 'Remove all outgoing control flows'
      do {
        for (cf in self.outgoing.select(i|i.isKindOf(ControlFlow))) {
          delete cf;
        }
      }
    }
  }
}

-- OPERATIONS --------------------

operation ActivityNode newExecutableNode() {
  var newElement := new ExecutableNode;
  self.addSibling(newElement);
  return newElement;
}

operation ActivityNode newForkNode() {
  var newElement := new ForkNode;
  self.addSibling(newElement);
  return newElement;
}

operation ActivityNode newJoinNode() {
  var newElement := new JoinNode;
  self.addSibling(newElement);
  return newElement;
}

operation ActivityNode newDecisionNode() {
  var newElement := new DecisionNode;
  self.addSibling(newElement);
  return newElement;
}

operation ActivityNode addSibling(node : ActivityNode) {
  self.eContainer.nodes.add(node);
}
