/**
 */
package serviceComposition.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import serviceComposition.util.ServiceCompositionAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ServiceCompositionItemProviderAdapterFactory extends ServiceCompositionAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable
{
  /**
   * This keeps track of the root adapter factory that delegates to this adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComposedAdapterFactory parentAdapterFactory;

  /**
   * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IChangeNotifier changeNotifier = new ChangeNotifier();

  /**
   * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Collection<Object> supportedTypes = new ArrayList<Object>();

  /**
   * This constructs an instance.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ServiceCompositionItemProviderAdapterFactory()
  {
    supportedTypes.add(IEditingDomainItemProvider.class);
    supportedTypes.add(IStructuredItemContentProvider.class);
    supportedTypes.add(ITreeItemContentProvider.class);
    supportedTypes.add(IItemLabelProvider.class);
    supportedTypes.add(IItemPropertySource.class);
  }

  /**
   * This keeps track of the one adapter used for all {@link serviceComposition.ServiceComposition} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ServiceCompositionItemProvider serviceCompositionItemProvider;

  /**
   * This creates an adapter for a {@link serviceComposition.ServiceComposition}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createServiceCompositionAdapter()
  {
    if (serviceCompositionItemProvider == null)
    {
      serviceCompositionItemProvider = new ServiceCompositionItemProvider(this);
    }

    return serviceCompositionItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link serviceComposition.SwimlaneContainer} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SwimlaneContainerItemProvider swimlaneContainerItemProvider;

  /**
   * This creates an adapter for a {@link serviceComposition.SwimlaneContainer}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createSwimlaneContainerAdapter()
  {
    if (swimlaneContainerItemProvider == null)
    {
      swimlaneContainerItemProvider = new SwimlaneContainerItemProvider(this);
    }

    return swimlaneContainerItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link serviceComposition.ActivityPerformanceAnnotation} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ActivityPerformanceAnnotationItemProvider activityPerformanceAnnotationItemProvider;

  /**
   * This creates an adapter for a {@link serviceComposition.ActivityPerformanceAnnotation}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createActivityPerformanceAnnotationAdapter()
  {
    if (activityPerformanceAnnotationItemProvider == null)
    {
      activityPerformanceAnnotationItemProvider = new ActivityPerformanceAnnotationItemProvider(this);
    }

    return activityPerformanceAnnotationItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link serviceComposition.ActionPerformanceAnnotation} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ActionPerformanceAnnotationItemProvider actionPerformanceAnnotationItemProvider;

  /**
   * This creates an adapter for a {@link serviceComposition.ActionPerformanceAnnotation}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createActionPerformanceAnnotationAdapter()
  {
    if (actionPerformanceAnnotationItemProvider == null)
    {
      actionPerformanceAnnotationItemProvider = new ActionPerformanceAnnotationItemProvider(this);
    }

    return actionPerformanceAnnotationItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link serviceComposition.CompositionControlFlow} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CompositionControlFlowItemProvider compositionControlFlowItemProvider;

  /**
   * This creates an adapter for a {@link serviceComposition.CompositionControlFlow}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCompositionControlFlowAdapter()
  {
    if (compositionControlFlowItemProvider == null)
    {
      compositionControlFlowItemProvider = new CompositionControlFlowItemProvider(this);
    }

    return compositionControlFlowItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link serviceComposition.CompositionObjectFlow} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CompositionObjectFlowItemProvider compositionObjectFlowItemProvider;

  /**
   * This creates an adapter for a {@link serviceComposition.CompositionObjectFlow}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCompositionObjectFlowAdapter()
  {
    if (compositionObjectFlowItemProvider == null)
    {
      compositionObjectFlowItemProvider = new CompositionObjectFlowItemProvider(this);
    }

    return compositionObjectFlowItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link serviceComposition.ActivityControlFlow} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ActivityControlFlowItemProvider activityControlFlowItemProvider;

  /**
   * This creates an adapter for a {@link serviceComposition.ActivityControlFlow}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createActivityControlFlowAdapter()
  {
    if (activityControlFlowItemProvider == null)
    {
      activityControlFlowItemProvider = new ActivityControlFlowItemProvider(this);
    }

    return activityControlFlowItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link serviceComposition.ActivityObjectFlow} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ActivityObjectFlowItemProvider activityObjectFlowItemProvider;

  /**
   * This creates an adapter for a {@link serviceComposition.ActivityObjectFlow}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createActivityObjectFlowAdapter()
  {
    if (activityObjectFlowItemProvider == null)
    {
      activityObjectFlowItemProvider = new ActivityObjectFlowItemProvider(this);
    }

    return activityObjectFlowItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link serviceComposition.ServiceActivity} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ServiceActivityItemProvider serviceActivityItemProvider;

  /**
   * This creates an adapter for a {@link serviceComposition.ServiceActivity}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createServiceActivityAdapter()
  {
    if (serviceActivityItemProvider == null)
    {
      serviceActivityItemProvider = new ServiceActivityItemProvider(this);
    }

    return serviceActivityItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link serviceComposition.CompositionStart} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CompositionStartItemProvider compositionStartItemProvider;

  /**
   * This creates an adapter for a {@link serviceComposition.CompositionStart}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCompositionStartAdapter()
  {
    if (compositionStartItemProvider == null)
    {
      compositionStartItemProvider = new CompositionStartItemProvider(this);
    }

    return compositionStartItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link serviceComposition.CompositionFinish} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CompositionFinishItemProvider compositionFinishItemProvider;

  /**
   * This creates an adapter for a {@link serviceComposition.CompositionFinish}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCompositionFinishAdapter()
  {
    if (compositionFinishItemProvider == null)
    {
      compositionFinishItemProvider = new CompositionFinishItemProvider(this);
    }

    return compositionFinishItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link serviceComposition.CompositionDecision} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CompositionDecisionItemProvider compositionDecisionItemProvider;

  /**
   * This creates an adapter for a {@link serviceComposition.CompositionDecision}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCompositionDecisionAdapter()
  {
    if (compositionDecisionItemProvider == null)
    {
      compositionDecisionItemProvider = new CompositionDecisionItemProvider(this);
    }

    return compositionDecisionItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link serviceComposition.CompositionFork} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CompositionForkItemProvider compositionForkItemProvider;

  /**
   * This creates an adapter for a {@link serviceComposition.CompositionFork}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCompositionForkAdapter()
  {
    if (compositionForkItemProvider == null)
    {
      compositionForkItemProvider = new CompositionForkItemProvider(this);
    }

    return compositionForkItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link serviceComposition.CompositionJoin} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CompositionJoinItemProvider compositionJoinItemProvider;

  /**
   * This creates an adapter for a {@link serviceComposition.CompositionJoin}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCompositionJoinAdapter()
  {
    if (compositionJoinItemProvider == null)
    {
      compositionJoinItemProvider = new CompositionJoinItemProvider(this);
    }

    return compositionJoinItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link serviceComposition.CompositionObjectNode} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CompositionObjectNodeItemProvider compositionObjectNodeItemProvider;

  /**
   * This creates an adapter for a {@link serviceComposition.CompositionObjectNode}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCompositionObjectNodeAdapter()
  {
    if (compositionObjectNodeItemProvider == null)
    {
      compositionObjectNodeItemProvider = new CompositionObjectNodeItemProvider(this);
    }

    return compositionObjectNodeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link serviceComposition.ActivityAction} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ActivityActionItemProvider activityActionItemProvider;

  /**
   * This creates an adapter for a {@link serviceComposition.ActivityAction}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createActivityActionAdapter()
  {
    if (activityActionItemProvider == null)
    {
      activityActionItemProvider = new ActivityActionItemProvider(this);
    }

    return activityActionItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link serviceComposition.ActivityStart} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ActivityStartItemProvider activityStartItemProvider;

  /**
   * This creates an adapter for a {@link serviceComposition.ActivityStart}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createActivityStartAdapter()
  {
    if (activityStartItemProvider == null)
    {
      activityStartItemProvider = new ActivityStartItemProvider(this);
    }

    return activityStartItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link serviceComposition.ActivityFinish} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ActivityFinishItemProvider activityFinishItemProvider;

  /**
   * This creates an adapter for a {@link serviceComposition.ActivityFinish}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createActivityFinishAdapter()
  {
    if (activityFinishItemProvider == null)
    {
      activityFinishItemProvider = new ActivityFinishItemProvider(this);
    }

    return activityFinishItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link serviceComposition.ActivityDecision} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ActivityDecisionItemProvider activityDecisionItemProvider;

  /**
   * This creates an adapter for a {@link serviceComposition.ActivityDecision}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createActivityDecisionAdapter()
  {
    if (activityDecisionItemProvider == null)
    {
      activityDecisionItemProvider = new ActivityDecisionItemProvider(this);
    }

    return activityDecisionItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link serviceComposition.ActivityFork} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ActivityForkItemProvider activityForkItemProvider;

  /**
   * This creates an adapter for a {@link serviceComposition.ActivityFork}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createActivityForkAdapter()
  {
    if (activityForkItemProvider == null)
    {
      activityForkItemProvider = new ActivityForkItemProvider(this);
    }

    return activityForkItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link serviceComposition.ActivityJoin} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ActivityJoinItemProvider activityJoinItemProvider;

  /**
   * This creates an adapter for a {@link serviceComposition.ActivityJoin}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createActivityJoinAdapter()
  {
    if (activityJoinItemProvider == null)
    {
      activityJoinItemProvider = new ActivityJoinItemProvider(this);
    }

    return activityJoinItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link serviceComposition.ActivityObjectNode} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ActivityObjectNodeItemProvider activityObjectNodeItemProvider;

  /**
   * This creates an adapter for a {@link serviceComposition.ActivityObjectNode}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createActivityObjectNodeAdapter()
  {
    if (activityObjectNodeItemProvider == null)
    {
      activityObjectNodeItemProvider = new ActivityObjectNodeItemProvider(this);
    }

    return activityObjectNodeItemProvider;
  }

  /**
   * This returns the root adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComposeableAdapterFactory getRootAdapterFactory()
  {
    return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
  }

  /**
   * This sets the composed adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
  {
    this.parentAdapterFactory = parentAdapterFactory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object type)
  {
    return supportedTypes.contains(type) || super.isFactoryForType(type);
  }

  /**
   * This implementation substitutes the factory itself as the key for the adapter.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter adapt(Notifier notifier, Object type)
  {
    return super.adapt(notifier, this);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object adapt(Object object, Object type)
  {
    if (isFactoryForType(type))
    {
      Object adapter = super.adapt(object, type);
      if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter)))
      {
        return adapter;
      }
    }

    return null;
  }

  /**
   * This adds a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void addListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.addListener(notifyChangedListener);
  }

  /**
   * This removes a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void removeListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.removeListener(notifyChangedListener);
  }

  /**
   * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void fireNotifyChanged(Notification notification)
  {
    changeNotifier.fireNotifyChanged(notification);

    if (parentAdapterFactory != null)
    {
      parentAdapterFactory.fireNotifyChanged(notification);
    }
  }

  /**
   * This disposes all of the item providers created by this factory. 
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void dispose()
  {
    if (serviceCompositionItemProvider != null) serviceCompositionItemProvider.dispose();
    if (swimlaneContainerItemProvider != null) swimlaneContainerItemProvider.dispose();
    if (activityPerformanceAnnotationItemProvider != null) activityPerformanceAnnotationItemProvider.dispose();
    if (actionPerformanceAnnotationItemProvider != null) actionPerformanceAnnotationItemProvider.dispose();
    if (compositionControlFlowItemProvider != null) compositionControlFlowItemProvider.dispose();
    if (compositionObjectFlowItemProvider != null) compositionObjectFlowItemProvider.dispose();
    if (activityControlFlowItemProvider != null) activityControlFlowItemProvider.dispose();
    if (activityObjectFlowItemProvider != null) activityObjectFlowItemProvider.dispose();
    if (serviceActivityItemProvider != null) serviceActivityItemProvider.dispose();
    if (compositionStartItemProvider != null) compositionStartItemProvider.dispose();
    if (compositionFinishItemProvider != null) compositionFinishItemProvider.dispose();
    if (compositionDecisionItemProvider != null) compositionDecisionItemProvider.dispose();
    if (compositionForkItemProvider != null) compositionForkItemProvider.dispose();
    if (compositionJoinItemProvider != null) compositionJoinItemProvider.dispose();
    if (compositionObjectNodeItemProvider != null) compositionObjectNodeItemProvider.dispose();
    if (activityActionItemProvider != null) activityActionItemProvider.dispose();
    if (activityStartItemProvider != null) activityStartItemProvider.dispose();
    if (activityFinishItemProvider != null) activityFinishItemProvider.dispose();
    if (activityDecisionItemProvider != null) activityDecisionItemProvider.dispose();
    if (activityForkItemProvider != null) activityForkItemProvider.dispose();
    if (activityJoinItemProvider != null) activityJoinItemProvider.dispose();
    if (activityObjectNodeItemProvider != null) activityObjectNodeItemProvider.dispose();
  }

}
