// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.uca.b2mml.controllers.material;

import es.uca.b2mml.controllers.material.MaterialLotController;
import es.uca.b2mml.domain.material.MaterialDefinition;
import es.uca.b2mml.domain.material.MaterialLot;
import es.uca.b2mml.domain.material.MaterialLotStatus;
import es.uca.b2mml.domain.material.MaterialSublot;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect MaterialLotController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String MaterialLotController.create(@Valid MaterialLot materialLot, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, materialLot);
            return "materiallots/create";
        }
        uiModel.asMap().clear();
        materialLot.persist();
        return "redirect:/materiallots/" + encodeUrlPathSegment(materialLot.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String MaterialLotController.createForm(Model uiModel) {
        populateEditForm(uiModel, new MaterialLot());
        List<String[]> dependencies = new ArrayList<String[]>();
        if (MaterialDefinition.countMaterialDefinitions() == 0) {
            dependencies.add(new String[] { "materialdefinition", "materialdefinitions" });
        }
        if (MaterialLotStatus.countMaterialLotStatuses() == 0) {
            dependencies.add(new String[] { "materiallotstatus", "materiallotstatuses" });
        }
        uiModel.addAttribute("dependencies", dependencies);
        return "materiallots/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String MaterialLotController.show(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("materiallot", MaterialLot.findMaterialLot(id));
        uiModel.addAttribute("itemId", id);
        return "materiallots/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String MaterialLotController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("materiallots", MaterialLot.findMaterialLotEntries(firstResult, sizeNo));
            float nrOfPages = (float) MaterialLot.countMaterialLots() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("materiallots", MaterialLot.findAllMaterialLots());
        }
        return "materiallots/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String MaterialLotController.update(@Valid MaterialLot materialLot, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, materialLot);
            return "materiallots/update";
        }
        uiModel.asMap().clear();
        materialLot.merge();
        return "redirect:/materiallots/" + encodeUrlPathSegment(materialLot.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String MaterialLotController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, MaterialLot.findMaterialLot(id));
        return "materiallots/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String MaterialLotController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        MaterialLot materialLot = MaterialLot.findMaterialLot(id);
        materialLot.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/materiallots";
    }
    
    void MaterialLotController.populateEditForm(Model uiModel, MaterialLot materialLot) {
        uiModel.addAttribute("materialLot", materialLot);
        uiModel.addAttribute("materialdefinitions", MaterialDefinition.findAllMaterialDefinitions());
        uiModel.addAttribute("materiallotstatuses", MaterialLotStatus.findAllMaterialLotStatuses());
        uiModel.addAttribute("materialsublots", MaterialSublot.findAllMaterialSublots());
    }
    
    String MaterialLotController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
