@namespace(uri="http://www.uca.es/modeling/serviceProcess", prefix="sp")
package serviceProcess;

@gmf.diagram(foo="bar")
class ServiceProcess {
  val Activity[*] activity;
  val ActivityEdge[*] edge;
  val Annotation[*] annotations;
}

@gmf.node(label="name")
abstract class NamedElement {
   attr String name;
}

abstract class Activity {
  @gmf.compartment(layout="free")
  val ActivityNode[*]#activity nodes;
}

abstract class ActivityNode {
  ref Activity#nodes activity;
  ref ActivityEdge[*]#target incoming;
  ref ActivityEdge[*]#source outgoing;
}

@gmf.link(source="source", target="target", target.decoration="arrow", width="3")
abstract class ActivityEdge {
  ref ActivityNode#incoming target;
  ref ActivityNode#outgoing source;
  @gmf.link(tool="Link Condition")
  ref EdgeCondition#edge condition;
}

abstract class Annotation {
   attr boolean manuallyAdded = true;
}

/* ANNOTATIONS */

/* condition = 'else' -> default flow */
@gmf.node(label="probability,language,condition",
          label.pattern="<<{1}>> : [{0}], p = {2}",
          tool.name="Edge Condition")
class EdgeCondition extends Annotation {
    ref ActivityEdge#condition edge;
    attr String condition;
    attr ExpressionLanguage language;
    attr Double probability;
}

@gmf.node(label="transactionsPerSec,secsTimeLimit",
          label.pattern="{0} transactions @ {1}",
          figure="rectangle",
          tool.name="Performance Constraint")
class PerformanceAnnotation extends Annotation {
   attr Integer transactionsPerSec;
   attr Double secsTimeLimit;
   ref ExecutableNode#annotation execNode;
}

/* ACTIVITIES */

class ServiceActivity extends Activity, NamedElement {
}

/* EDGES */

@gmf.link(style="dash")
class ObjectFlow extends ActivityEdge {
}

class ControlFlow extends ActivityEdge {
}

/* NODES */

abstract class ControlNode extends ActivityNode {
}

@gmf.node(figure="figures.LabeledEllipse", label.icon="false")
class ExecutableNode extends ControlNode, NamedElement {
  @gmf.link(tool.name="Link Performance Annotation")
  ref PerformanceAnnotation#execNode annotation;
}

@gmf.node(figure="figures.FgBgFilledCircleFigure", border.color="0,0,0", size="30,30")
class InitialNode extends ControlNode {
}

@gmf.node(figure="figures.FgFilledCircleFigure", border.color="0,0,0", size="30,30")
class FinalNode extends ControlNode {
}

@gmf.node(figure="figures.FgFilledRectangleFigure", border.color="0,0,0", size="15,30")
class ForkNode extends ControlNode {
}

@gmf.node(figure="figures.FgFilledRectangleFigure", border.color="0,0,0", size="15,30")
class JoinNode extends ControlNode {
}

@gmf.node(figure="figures.DiamondFigure", border.color="0,0,0", size="30,30")
class DecisionNode extends ControlNode {
}

/* DATATYPES */

enum ExpressionLanguage {
   OCL;
   JML;
}
