import 'platform:/plugin/es.uca.modeling.eol/wizards/algorithms_co.eol';

@test
operation newTimeLimitAlgorithmWorks() {
  for (start in ActivityStart.all) {
    var globalLimit = start.getGlobalTimeLimit();
    var endNodes = start.getEndNodes();
    assertTrue(distributeTime(globalLimit, endNodes));
  }
}

@test
operation oldTimeLimitAlgorithmWorks() {
  for (start in ActivityStart.all) {
    assertTrue(annotateTimeLimits(start.getGlobalTimeLimit(), start));
  }
}

@test
operation throughputAlgorithmWorks() {
  for (start in ActivityStart.all) {
    assertTrue(annotateConcurrentUsers(start));
  }
}

@test
operation newTL_sequence() {
  var saInSiteQC := ServiceActivity.all.selectOne(s|s.name == 'Realizar control de calidad in situ');
  var start := saInSiteQC.nodes.selectOne(n : ActivityStart | true);
  var actions := saInSiteQC.nodes.select(n : ActivityAction | true);

  saInSiteQC.annotation.secsTimeLimit := 10.0d;
  assertTrue(distributeTime(start.getGlobalTimeLimit(), start.getEndNodes()));

  var expectedTL := 10 / actions.size().asDouble();
  for (action in saInSiteQC.nodes.select(n : ActivityAction | true)) {
    assertEquals(expectedTL, action.annotation.secsTimeLimit, 3);
  }
}

@test
operation oldTL_sequence() {
  var saInSiteQC := ServiceActivity.all.selectOne(s|s.name == 'Realizar control de calidad in situ');
  var start := saInSiteQC.nodes.selectOne(n : ActivityStart | true);
  var actions := saInSiteQC.nodes.select(n : ActivityAction | true);

  saInSiteQC.annotation.secsTimeLimit := 10.0d;
  assertTrue(annotateTimeLimits(start.getGlobalTimeLimit(), start));

  var expectedTL := 10 / actions.size().asDouble();
  for (action in saInSiteQC.nodes.select(n : ActivityAction | true)) {
    assertEquals(expectedTL, action.annotation.secsTimeLimit, 3);
  }
}

@test
operation throughput_sequence() {
  var saInSiteQC := ServiceActivity.all.selectOne(s|s.name == 'Realizar control de calidad in situ');
  var start := saInSiteQC.nodes.selectOne(n : ActivityStart | true);

  var expectedCU := 3.0d;
  saInSiteQC.annotation.concurrentUsers := expectedCU;
  assertTrue(annotateConcurrentUsers(start));

  for (action in saInSiteQC.nodes.select(n : ActivityAction | true)) {
    assertEquals(expectedCU, action.annotation.concurrentUsers, 3);
  }
}
