// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.uca.b2mml.domain.product;

import es.uca.b2mml.domain.product.ProductSegmentDependency;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect ProductSegmentDependency_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager ProductSegmentDependency.entityManager;
    
    public static final EntityManager ProductSegmentDependency.entityManager() {
        EntityManager em = new ProductSegmentDependency().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long ProductSegmentDependency.countProductSegmentDependencies() {
        return entityManager().createQuery("SELECT COUNT(o) FROM ProductSegmentDependency o", Long.class).getSingleResult();
    }
    
    public static List<ProductSegmentDependency> ProductSegmentDependency.findAllProductSegmentDependencies() {
        return entityManager().createQuery("SELECT o FROM ProductSegmentDependency o", ProductSegmentDependency.class).getResultList();
    }
    
    public static ProductSegmentDependency ProductSegmentDependency.findProductSegmentDependency(Long id) {
        if (id == null) return null;
        return entityManager().find(ProductSegmentDependency.class, id);
    }
    
    public static List<ProductSegmentDependency> ProductSegmentDependency.findProductSegmentDependencyEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM ProductSegmentDependency o", ProductSegmentDependency.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void ProductSegmentDependency.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void ProductSegmentDependency.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            ProductSegmentDependency attached = ProductSegmentDependency.findProductSegmentDependency(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void ProductSegmentDependency.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void ProductSegmentDependency.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public ProductSegmentDependency ProductSegmentDependency.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        ProductSegmentDependency merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
