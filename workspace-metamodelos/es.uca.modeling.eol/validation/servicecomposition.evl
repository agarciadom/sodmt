-- Diagram constraints --------------------------
import 'common.evl';

context ServiceComposition {
  constraint ExactlyOneCompositionStart {
    check : CompositionStart.all.size() = 1
    message : 'There must be exactly one initial node for the whole composition'
  }
}

context ServiceActivity {
  constraint PerformanceConstraintMustBeDefined {
    check : self.annotation.isDefined()
    message : 'Every service activity must include a performance constraint derived from its service process model'
    fix {
      title : 'Add default performance constraint'
      do {
        var newAnnotation := new ActivityPerformanceAnnotation;
        ServiceComposition.all.first().activityPerformance.add(newAnnotation);
        self.annotation   := newAnnotation;
      }
    }
  }
  constraint AtLeastOneStartNode {
    check : self.nodes.select(r|r.isKindOf(ActivityStart)).notEmpty()
    message : 'Every service activity must have at least one initial node'
    fix {
      title : 'Add initial node to the activity'
      do {
        self.nodes.add(new ActivityStart);
      }
    }
  }
  constraint AtMostOneStartNode {
    guard : self.satisfies('AtLeastOneStartNode')
    check : self.nodes.select(r|r.isKindOf(ActivityStart)).size() = 1
    message : 'Every service activity must have at most one initial node'
  }
}

context ActivityFlowEdge {
  constraint SameActivity {
    check : self.source.activity = self.target.activity
    message : 'Activity edges should only link elements in the same activity'
    fix {
      title : 'Delete edge'
      do {
        delete self;
      }
    }
  }

  constraint SourceMustBeActivityFlowNode {
    guard : self.source.isDefined()
    check : self.source.isKindOf(ActivityFlowNode)
    message : 'The source of an activity flow edge must be an activity flow node'
  }

  constraint TargetMustBeActivityFlowNode {
    guard : self.target.isDefined()
    check : self.target.isKindOf(ActivityFlowNode)
    message : 'The target of an activity flow edge must be an activity flow node'
  }
}

context CompositionFlowEdge {
  constraint SourceMustBeCompositionFlowNode {
    guard : self.source.isDefined()
    check : self.source.isKindOf(CompositionFlowNode)
    message : 'The source of a composition flow edge must be a composition flow node'
  }

  constraint TargetMustBeCompositionFlowNode {
    guard : self.target.isDefined()
    check : self.target.isKindOf(CompositionFlowNode)
    message : 'The target of a composition flow edge must be a composition flow node'
  }
}

-- OPERATIONS REQUIRED BY THE SHARED EVL CODE

operation CompositionFlowNode newExecutableNode() {
  var newElement := new ServiceActivity;
  self.addSibling(newElement);
  return newElement;
}

operation CompositionFlowNode newForkNode() {
  var newElement := new CompositionFork;
  self.addSibling(newElement);
  return newElement;
}

operation CompositionFlowNode newJoinNode() {
  var newElement := new CompositionJoin;
  self.addSibling(newElement);
  return newElement;
}

operation CompositionFlowNode newDecisionNode() {
  var newElement := new CompositionDecision;
  self.addSibling(newElement);
  return newElement;
}

operation CompositionFlowNode addSibling(node : CompositionFlowNode) {
  ServiceComposition.all.first().nodes.add(node);
}

operation ActivityFlowNode newExecutableNode() {
  var newElement := new ActivityAction;
  self.addSibling(newElement);
  return newElement;
}

operation ActivityFlowNode newForkNode() {
  var newElement := new ActivityFork;
  self.addSibling(newElement);
  return newElement;
}

operation ActivityFlowNode newJoinNode() {
  var newElement := new ActivityJoin;
  self.addSibling(newElement);
  return newElement;
}

operation ActivityFlowNode newDecisionNode() {
  var newElement := new ActivityDecision;
  self.addSibling(newElement);
  return newElement;
}

operation ActivityFlowNode addSibling(node : ActivityFlowNode) {
  self.activity.nodes.add(node);
}

operation addEdge(e : CompositionFlowEdge) {
  ServiceComposition.all.first().compositionEdges.add(e);
}

operation addEdge(e : ActivityFlowEdge) {
  ServiceComposition.all.first().activityEdges.add(e);
}
