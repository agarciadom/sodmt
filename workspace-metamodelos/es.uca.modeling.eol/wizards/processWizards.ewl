import 'time_limits.eol';
import 'transactions_per_sec.eol';

wizard InferPerformanceAnnotations {
  title : 'Infer performance annotations'
  do {
    transaction {
      for (start in ProcessStart.all) {
        if (not annotateTimeLimits(start)
            or not annotateTransactionsPerSec(start)) {
          abort;
          return;
        }
      }
    } -- transaction
  }
}

wizard RemoveAllInferredAnnotations {
  title : 'Remove all inferred annotations'
  do {
    for (constraint in ActivityPerformanceAnnotation.all.select(r|not r.manuallyAdded)) {
      delete constraint;
    }
  }
}

operation ServiceActivity createPerformanceAnnotation() {
  self.annotation := new ActivityPerformanceAnnotation;
  self.annotation.manuallyAdded := false;
  ServiceProcess.all.first().activityPerformance.add(self.annotation);
}

operation ProcessStart getGlobalTimeLimit() {
  return ProcessPerformanceAnnotation.all.first().secsTimeLimit;
}

@cached
operation ProcessStart getTransactionsPerSec() : Real {
  return ProcessPerformanceAnnotation.all.first().transactionsPerSec;
}
