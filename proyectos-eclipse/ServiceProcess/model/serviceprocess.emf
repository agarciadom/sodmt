@namespace(uri="http://serviceProcess", prefix="serviceProcess")
package serviceProcess;

@gmf.diagram(foo="bar")
class ServiceProcess {
  val Activity[*] activity;
  val ActivityEdge[*] edge;
  val Annotation[*] annotations;
}

@gmf.node(label="name")
abstract class NamedElement {
   attr String name;
}

abstract class Activity {
  @gmf.compartment(layout="free")
  val ActivityNode[*]#activity nodes;
}

abstract class ActivityNode {
  ref Activity#nodes activity;
  ref ActivityEdge[*]#target incoming;
  ref ActivityEdge[*]#source outgoing;
}

@gmf.link(source="source", target="target", target.decoration="arrow", width="3")
abstract class ActivityEdge {
  ref ActivityNode#incoming target;
  ref ActivityNode#outgoing source;
}

abstract class Annotation {
}

/* ANNOTATIONS */

@gmf.node(label.pattern="p = {0}", label="probability", figure="rectangle", size="60,30")
class ProbabilityAnnotation extends Annotation {
   attr Double probability;

   @gmf.link(foo="bar")
   ref ConditionalControlFlow#annotation condition;
}

@gmf.node(label="transactionsPerSec,secsTimeLimit", label.pattern="{0} transactions @ {1}", figure="rectangle")
class PerformanceAnnotation extends Annotation {
   attr Integer transactionsPerSec;
   attr Double secsTimeLimit;

   @gmf.link(label="Annotate ExecutableNode")
   ref ExecutableNode#annotation execNode;
}

/* ACTIVITIES */
class ServiceActivity extends Activity, NamedElement {
}

/* EDGES */

@gmf.link(style="dash")
class ObjectFlow extends ActivityEdge {
}

class ControlFlow extends ActivityEdge {
}

/* condition = else -> default flow */
@gmf.link(label="language,condition",
          label.icon="false",
          label.pattern="<<{1}>> : [{0}]")
class ConditionalControlFlow extends ControlFlow {
    attr String condition;
    attr ExpressionLanguage language;
    ref ProbabilityAnnotation#condition annotation;
}

/* NODES */

abstract class ControlNode extends ActivityNode {
}

@gmf.node(figure="figures.LabeledEllipse", label.icon="false")
class ExecutableNode extends ControlNode, NamedElement {
  ref PerformanceAnnotation#execNode annotation;
}

@gmf.node(figure="figures.InitialNodeFigure")
class InitialNode extends ControlNode {
}

@gmf.node(figure="figures.FinalNodeFigure")
class FinalNode extends ControlNode {
}

@gmf.node(figure="figures.ForkJoinNodeFigure")
class ForkNode extends ControlNode {
}

@gmf.node(figure="figures.ForkJoinNodeFigure")
class JoinNode extends ControlNode {
}

@gmf.node(figure="figures.DiamondFigure")
class DecisionNode extends ControlNode {
}

/* DATATYPES */

enum ExpressionLanguage {
   OCL;
   JML;
}
