operation assertHasProblem(ruleName : String) {
  assertHasProblems(Sequence { ruleName });
}

operation assertNoProblem(ruleName : String) {
  assertNoProblems(Sequence { ruleName });
}

operation assertHasProblems(ruleNames : Sequence) {
  var problems = EVL!UnsatisfiedConstraint.allInstances;

  for (ruleName in ruleNames) {
    if (not problems.exists(p|p.constraint.name = ruleName)) {
      if (problems.isEmpty) {
        fail("The model did not violate rule '" + ruleName + "' nor any other");
      } else {
        var problemNames = problems.collect(p|p.constraint.name).concat(",");
        fail("The model did not violate rule '" + ruleName + "', but these ones: " + problemNames);
      }
    }
  }
}

operation assertNoProblems(ruleNames : Sequence) {
  var problems = EVL!UnsatisfiedConstraint.allInstances;

  for (ruleName in ruleNames) {
    assertFalse("The model should not violate rule '" + ruleName + "'", problems.exists(p|p.constraint.name = ruleName));
  }
}
