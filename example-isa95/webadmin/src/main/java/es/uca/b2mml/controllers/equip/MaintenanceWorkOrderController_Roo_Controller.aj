// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.uca.b2mml.controllers.equip;

import es.uca.b2mml.controllers.equip.MaintenanceWorkOrderController;
import es.uca.b2mml.domain.equip.MaintenanceOrderStatus;
import es.uca.b2mml.domain.equip.MaintenanceRequest;
import es.uca.b2mml.domain.equip.MaintenanceResponse;
import es.uca.b2mml.domain.equip.MaintenanceWorkOrder;
import es.uca.b2mml.domain.people.Person;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect MaintenanceWorkOrderController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String MaintenanceWorkOrderController.create(@Valid MaintenanceWorkOrder maintenanceWorkOrder, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, maintenanceWorkOrder);
            return "maintenanceworkorders/create";
        }
        uiModel.asMap().clear();
        maintenanceWorkOrder.persist();
        return "redirect:/maintenanceworkorders/" + encodeUrlPathSegment(maintenanceWorkOrder.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String MaintenanceWorkOrderController.createForm(Model uiModel) {
        populateEditForm(uiModel, new MaintenanceWorkOrder());
        List<String[]> dependencies = new ArrayList<String[]>();
        if (Person.countPeople() == 0) {
            dependencies.add(new String[] { "person", "people" });
        }
        if (MaintenanceOrderStatus.countMaintenanceOrderStatuses() == 0) {
            dependencies.add(new String[] { "maintenanceorderstatus", "maintenanceorderstatuses" });
        }
        uiModel.addAttribute("dependencies", dependencies);
        return "maintenanceworkorders/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String MaintenanceWorkOrderController.show(@PathVariable("id") Long id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("maintenanceworkorder", MaintenanceWorkOrder.findMaintenanceWorkOrder(id));
        uiModel.addAttribute("itemId", id);
        return "maintenanceworkorders/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String MaintenanceWorkOrderController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("maintenanceworkorders", MaintenanceWorkOrder.findMaintenanceWorkOrderEntries(firstResult, sizeNo));
            float nrOfPages = (float) MaintenanceWorkOrder.countMaintenanceWorkOrders() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("maintenanceworkorders", MaintenanceWorkOrder.findAllMaintenanceWorkOrders());
        }
        addDateTimeFormatPatterns(uiModel);
        return "maintenanceworkorders/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String MaintenanceWorkOrderController.update(@Valid MaintenanceWorkOrder maintenanceWorkOrder, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, maintenanceWorkOrder);
            return "maintenanceworkorders/update";
        }
        uiModel.asMap().clear();
        maintenanceWorkOrder.merge();
        return "redirect:/maintenanceworkorders/" + encodeUrlPathSegment(maintenanceWorkOrder.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String MaintenanceWorkOrderController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, MaintenanceWorkOrder.findMaintenanceWorkOrder(id));
        return "maintenanceworkorders/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String MaintenanceWorkOrderController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        MaintenanceWorkOrder maintenanceWorkOrder = MaintenanceWorkOrder.findMaintenanceWorkOrder(id);
        maintenanceWorkOrder.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/maintenanceworkorders";
    }
    
    void MaintenanceWorkOrderController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("maintenanceWorkOrder_plannedstart_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("maintenanceWorkOrder_plannedfinish_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
    }
    
    void MaintenanceWorkOrderController.populateEditForm(Model uiModel, MaintenanceWorkOrder maintenanceWorkOrder) {
        uiModel.addAttribute("maintenanceWorkOrder", maintenanceWorkOrder);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("maintenanceorderstatuses", MaintenanceOrderStatus.findAllMaintenanceOrderStatuses());
        uiModel.addAttribute("maintenancerequests", MaintenanceRequest.findAllMaintenanceRequests());
        uiModel.addAttribute("maintenanceresponses", MaintenanceResponse.findAllMaintenanceResponses());
        uiModel.addAttribute("people", Person.findAllPeople());
    }
    
    String MaintenanceWorkOrderController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
