import 'evl_utils.eol';

@setup
operation setUp() {
  // available directly within the @test
  var sp = new SP!ServiceProcess;
}

@test
operation ExactlyOneProcessStart_noStart() {
  validate();
  assertHasProblem('ExactlyOneProcessStart');  
}

@test
operation ExactlyOneProcessStart_oneStart() {
  sp.newInitial();
  validate();
  assertNoProblem('ExactlyOneProcessStart');
}

@test
operation ExactlyOneProcessStart_twoStart() {
  sp.newInitial();
  sp.newInitial();
  validate();
  assertHasProblem('ExactlyOneProcessStart');
}

@test
operation ProcessPerformanceMustBeDefined_noProcessPerformance() {
  validate();
  assertHasProblem('ProcessPerformanceMustBeDefined');  
}

@test
operation ProcessPerformanceMustBeDefined_withProcessPerformance() {
  sp.processPerformance = new SP!PerformanceAnnotation;
  validate();
  assertNoProblem('ProcessPerformanceMustBeDefined');  
}

@test
operation MinimumOneFinalNode_noFinalNodes() {
  validate();
  assertHasProblem('MinimumOneFinalNode');
}

@test
operation MinimumOneFinalNode_oneFinalNode() {
  sp.newFinal();
  validate();
  assertNoProblem('MinimumOneFinalNode');
}

@test
operation MinimumOneFinalNode_twoFinalNodes() {
  sp.newFinal();
  sp.newFinal();
  validate();
  assertNoProblem('MinimumOneFinalNode');
}

@test
operation MinimumOneIncoming_initialNode() {
  sp.newInitial();
  validate();
  assertNoProblem('MinimumOneIncoming');
}

@test
operation MinimumOneIncoming_objectNode() {
  sp.newObject();
  validate();
  assertNoProblem('MinimumOneIncoming');
}

@test
operation MinimumOneIncoming_perfAnnotation() {
  sp.nodes.add(new SP!LocalPerformanceAnnotation);
  validate();
  assertNoProblem('MinimumOneIncoming');
}

@test
operation MinimumOneIncoming_objectFlowDoesNotCount() {
  var a1 = sp.newAction();
  var a2 = sp.newAction();
  a1.linkToObject(a1);
  validate();
  assertHasProblem('MinimumOneIncoming');
}

@test
operation MinimumOneIncoming_action() {
  sp.newAction();
  validate();
  assertHasProblem('MinimumOneIncoming');
}

@test
operation MaximumOneIncoming_action() {
  var ini = sp.newInitial();
  var act = ini.newAction();
  ini.linkTo(act);
  validate();
  assertHasProblem('MaximumOneIncoming');
}

@test
operation MaximumOneIncoming_actionsWithBothFlowsIsOK() {
  var a1 = sp.newInitial().newAction();
  var a2 = a1.newAction();
  a1.linkToObject(a2);
  validate();
  assertNoProblem('MaximumOneIncoming');
}

@test
operation MaximumOneIncoming_join() {
  var ini = sp.newInitial();
  var join = ini.newJoin();
  ini.linkTo(join);
  validate();
  assertNoProblem('MaximumOneIncoming');
}

@test
operation MinimumOneOutgoing_finalNode() {
  sp.newFinal();
  validate();
  assertNoProblem('MinimumOneOutgoing');
}

@test
operation MinimumOneOutgoing_objectNode() {
  sp.newObject();
  validate();
  assertNoProblem('MinimumOneOutgoing');
}

@test
operation MinimumOneOutgoing_perfAnnotation() {
  sp.nodes.add(new SP!LocalPerformanceAnnotation);
  validate();
  assertNoProblem('MinimumOneOutgoing');
}

@test
operation MinimumOneOutgoing_action() {
  sp.newAction();
  validate();
  assertHasProblem('MinimumOneOutgoing');
}

@test
operation MinimumOneOutgoing_objectFlowDoesNotCount() {
  var a1 = sp.newAction();
  var a2 = sp.newAction();
  a1.linkToObject(a1);
  validate();
  assertHasProblem('MinimumOneOutgoing');
}

@test
operation MaximumOneOutgoing_action() {
  var act = sp.newAction();
  var fin = act.newFinal();
  act.linkTo(fin);
  validate();
  assertHasProblem('MaximumOneOutgoing');
}

@test
operation MaximumOneOutgoing_fork() {
  var fork = sp.newFork();
  var fin = fork.newFinal();
  fork.linkTo(fin);
  validate();
  assertNoProblem('MaximumOneOutgoing');
}

@test
operation MaximumOneOutgoing_decision() {
  var dec = sp.newDecision();
  var fin = dec.newFinal();
  dec.linkTo(fin);
  validate();
  assertNoProblem('MaximumOneOutgoing');
}

@test
operation MaximumOneOutgoing_actionsWithBotFlowsIsOK() {
  var a1 = sp.newInitial().newAction();
  var a2 = a1.newAction();
  a1.linkToObject(a2);
  validate();
  assertNoProblem('MaximumOneOutgoing');
}

@test
operation BothEndsDefined_none() {
  sp.edges.add(new SP!ControlFlow);
  validate();
  assertHasProblem('BothEndsDefined');
}

@test
operation BothEndsDefined_onlySource() {
  var act = sp.newAction();
  act.linkTo(null);
  validate();
  assertHasProblem('BothEndsDefined');
}

@test
operation BothEndsDefined_onlyTarget() {
  var act = sp.newAction();
  var edge = new SP!ControlFlow;
  edge.target = act;
  sp.edges.add(edge);
  validate();
  assertHasProblem('BothEndsDefined');
}

@test
operation BothEndsDefined_both() {
  var act = sp.newAction();
  act.linkTo(act);
  validate();
  assertNoProblem('BothEndsDefined');
}

@test
operation NoSelfCycles_noEdges() {
  sp.newAction();
  validate();
  assertNoProblem('NoSelfCycles');
}

@test
operation NoSelfCycles_singleEdge() {
  var a = sp.newAction().newAction();
  validate();
  assertNoProblem('NoSelfCycles');
}

@test
operation NoSelfCycles_selfLoop() {
  var a = sp.newAction();
  a.linkTo(a);
  validate();
  assertHasProblem('NoSelfCycles');
}

@test
operation ConditionsOnlyFromDecisionNode_notFromDecision() {
  var a = sp.newAction();
  var b = sp.newAction();
  var e = a.linkTo(b);
  e.condition = 'foo';
  validate();
  assertHasProblem('ConditionsOnlyFromDecisionNode');
}

@test
operation ConditionsOnlyFromDecisionNode_fromDecision() {
  var a = sp.newDecision();
  var b = sp.newAction();
  var e = a.linkTo(b);
  e.condition = 'foo';

  validate();
  assertNoProblem('ConditionsOnlyFromDecisionNode');
}

@test
operation ConditionsAlwaysFromDecisionNode_noCondition() {
  var a = sp.newDecision();
  var b = sp.newAction();
  var e = a.linkTo(b);
  validate();
  assertHasProblem('ConditionsAlwaysFromDecisionNode');
}

@test
operation ConditionsAlwaysFromDecisionNode_withCondition() {
  var a = sp.newDecision();
  var b = sp.newAction();
  var e = a.linkTo(b);
  e.condition = 'foo';
  validate();
  assertNoProblem('ConditionsAlwaysFromDecisionNode');
}

@test
operation ValidProbabilityWithCondition_negativeProbability() {
  conditionProbabilityTest(-1d);
  validate();
  assertHasProblem('ValidProbabilityWithCondition');
}

@test
operation ValidProbabilityWithCondition_zeroProbability() {
  conditionProbabilityTest(0d);
  validate();
  assertHasProblem('ValidProbabilityWithCondition');
}

@test
operation ValidProbabilityWithCondition_oneProbability() {
  conditionProbabilityTest(1d);
  validate();
  assertHasProblem('ValidProbabilityWithCondition');
}

@test
operation ValidProbabilityWithCondition_twoProbability() {
  conditionProbabilityTest(2d);
  validate();
  assertHasProblem('ValidProbabilityWithCondition');
}

@test
operation ValidProbabilityWithCondition_halfProbability() {
  conditionProbabilityTest(0.5d);
  validate();
  assertNoProblem('ValidProbabilityWithCondition');
}

@test
operation ValidProbabilityWithoutCondition_defaultProbability() {
  sp.newAction().newAction();
  validate();
  assertNoProblem('ValidProbabilityWithoutCondition');
}

@test
operation ValidProbabilityWithoutCondition_customProbability() {
  var a = sp.newAction();
  var b = sp.newAction();
  a.linkTo(b).probability = 0.1d;
  validate();
  assertHasProblem('ValidProbabilityWithoutCondition');
}

@test
operation ControlFlow_SourceMustNotBeObjectNode_sourceIsNotObjectNode() {
  sp.newAction().newAction();
  validate();
  assertNoProblem('SourceMustNotBeObjectNode');
}

@test
operation ControlFlow_SourceMustNotBeObjectNode_sourceIsObjectNode() {
  sp.newObject().newAction();
  validate();
  assertHasProblem('SourceMustNotBeObjectNode');
}

@test
operation ControlFlow_TargetMustNotBeObjectNode_targetIsNotObjectNode() {
  sp.newAction().newAction();
  validate();
  assertNoProblem('TargetMustNotBeObjectNode');
}

@test
operation ControlFlow_TargetMustNotBeObjectNode_targetIsObjectNode() {
  sp.newAction().newObject();
  validate();
  assertHasProblem('TargetMustNotBeObjectNode');
}

@test
operation ControlFlow_CannotCrossStructuredNodes_different() {
  var a1 = sp.newSActivity().newAction();
  var a2 = sp.newSActivity().newAction();
  a1.linkTo(a2);
  validate();
  assertHasProblem('CannotCrossStructuredNodes');
}

@test
operation ControlFlow_CannotCrossStructuredNodes_same() {
  sp.newSActivity().newAction().newAction();
  validate();
  assertNoProblem('CannotCrossStructuredNodes');
}

@test
operation ObjectFlow_neitherObjectNode() {
  var a = sp.newAction();
  var b = sp.newSActivity();
  a.linkToObject(b);
  validate();
  assertHasProblems(Sequence {'EitherSourceOrTargetMustBeObjectNode', 'EitherSourceOrTargetMustBeExecutableNode'});
}

@test
operation ObjectFlow_sourceObjectNode() {
  var a = sp.newObject();
  var b = sp.newSActivity();
  a.linkToObject(b);
  validate();
  assertNoProblems(Sequence {'EitherSourceOrTargetMustBeObjectNode', 'EitherSourceOrTargetMustBeExecutableNode'});
}

@test
operation ObjectFlow_targetObjectNode() {
  var a = sp.newAction();
  var b = sp.newObject();
  a.linkToObject(b);
  validate();
  assertNoProblems(Sequence {'EitherSourceOrTargetMustBeObjectNode', 'EitherSourceOrTargetMustBeExecutableNode'});
}

@test
operation ObjectFlow_bothObjectNode() {
  var a = sp.newObject();
  var b = sp.newObject();
  a.linkToObject(b);
  validate();
  assertHasProblems(Sequence {'EitherSourceOrTargetMustBeObjectNode', 'EitherSourceOrTargetMustBeExecutableNode'});
}

@test
operation PerformanceAnnotation_ValidConcurrentUsers_negativeConcurrentUsers() {
  sp.processPerformance = new SP!PerformanceAnnotation;
  sp.processPerformance.concurrentUsers = -1.0d;
  validate();
  assertHasProblem('ValidConcurrentUsers');
}

@test
operation PerformanceAnnotation_ValidConcurrentUsers_zeroConcurrentUsers() {
  sp.processPerformance = new SP!PerformanceAnnotation;
  sp.processPerformance.concurrentUsers = 0.0d;
  validate();
  assertHasProblem('ValidConcurrentUsers');
}

@test
operation PerformanceAnnotation_ValidConcurrentUsers_twoConcurrentUsers() {
  sp.processPerformance = new SP!PerformanceAnnotation;
  sp.processPerformance.concurrentUsers = 2.0d;
  validate();
  assertNoProblem('ValidConcurrentUsers');
}

@test
operation PerformanceAnnotation_ValidGlobalTimeLimit_negativeTimeLimit() {
  sp.processPerformance = new SP!PerformanceAnnotation;
  sp.processPerformance.secsTimeLimit = -1.0d;
  validate();
  assertHasProblem('ValidGlobalTimeLimit');
}

@test
operation PerformanceAnnotation_ValidGlobalTimeLimit_zeroTimeLimit() {
  sp.processPerformance = new SP!PerformanceAnnotation;
  sp.processPerformance.secsTimeLimit = 0.0d;
  validate();
  assertHasProblem('ValidGlobalTimeLimit');
}

@test
operation PerformanceAnnotation_ValidGlobalTimeLimit_positiveTimeLimit() {
  sp.processPerformance = new SP!PerformanceAnnotation;
  sp.processPerformance.secsTimeLimit = 1.0d;
  validate();
  assertNoProblem('ValidGlobalTimeLimit');
}

@test
operation PerformanceAnnotation_ValidGlobalTimeLimit_noGlobalTimeLimits() {
  sp.nodes.add(new SP!LocalPerformanceAnnotation);
  validate();
  assertNoProblem('ValidGlobalTimeLimit');
}

@test
operation LocalPerformanceAnnotation_IsLinkedToNode_noLink() {
  sp.nodes.add(new SP!LocalPerformanceAnnotation);
  validate();
  assertHasProblem('IsLinkedToNode');
}

@test
operation LocalPerformanceAnnotation_IsLinkedToNode_withLink() {
  var lpa = new SP!LocalPerformanceAnnotation;
  sp.nodes.add(lpa);

  var ac = sp.newAction();
  lpa.execNode = ac;
  validate();
  assertNoProblem('IsLinkedToNode');
}

@test
operation LocalPerformanceAnnotation_ValidMinTime_negative() {
  minTimeTest(-1.0d);
  assertHasProblem('ValidMinTime');
}

@test
operation LocalPerformanceAnnotation_ValidMinTime_zero() {
  minTimeTest(0.0d);
  assertNoProblem('ValidMinTime');
}

@test
operation LocalPerformanceAnnotation_ValidMinTime_positive() {
  minTimeTest(1.0d);
  assertNoProblem('ValidMinTime');
}

@test
operation LocalPerformanceAnnotation_ValidWeight_negative() {
  weightTest(-1.0d);
  assertHasProblem('ValidWeight');
}

@test
operation LocalPerformanceAnnotation_ValidWeight_zero() {
  weightTest(0.0d);
  assertNoProblem('ValidWeight');
}

@test
operation LocalPerformanceAnnotation_ValidWeight_positive() {
  weightTest(1.0d);
  assertNoProblem('ValidWeight');
}

@test
operation LocalPerformanceAnnotation_ValidReps_negative() {
  repTest(-1.0d);
  assertHasProblem('ValidReps');
}

@test
operation LocalPerformanceAnnotation_ValidReps_zero() {
  repTest(0.0d);
  assertHasProblem('ValidReps');
}

@test
operation LocalPerformanceAnnotation_ValidReps_lessThanOne() {
  repTest(0.5d);
  assertHasProblem('ValidReps');
}

@test
operation LocalPerformanceAnnotation_ValidReps_one() {
  repTest(1.0d);
  assertNoProblem('ValidReps');
}

@test
operation LocalPerformanceAnnotation_ValidReps_greaterThanOne() {
  repTest(1.5d);
  assertNoProblem('ValidReps');
}

@test
operation LocalPerformanceAnnotation_NoIncomingForPerformanceAnnotation_withIncoming() {
  var lpa = new SP!LocalPerformanceAnnotation;
  var act = sp.newAction();
  act.linkTo(lpa);
  sp.nodes.add(lpa);
  validate();
  assertHasProblem('NoIncomingForPerformanceAnnotation');
}

@test
operation LocalPerformanceAnnotation_NoIncomingForPerformanceAnnotation_noIncoming() {
  sp.nodes.add(new SP!LocalPerformanceAnnotation);
  validate();
  assertNoProblem('NoIncomingForPerformanceAnnotation');
}

@test
operation LocalPerformanceAnnotation_NoOutgoingForPerformanceAnnotation_withOutgoing() {
  var lpa = new SP!LocalPerformanceAnnotation;
  sp.nodes.add(lpa);
  var act = lpa.newAction();
  validate();
  assertHasProblem('NoOutgoingForPerformanceAnnotation');
}

@test
operation LocalPerformanceAnnotation_NoIncomingForPerformanceAnnotation_noOutgoing() {
  sp.nodes.add(new SP!LocalPerformanceAnnotation);
  validate();
  assertNoProblem('NoOutgoingForPerformanceAnnotation');
}

@test
operation InitialNode_AllPathsFromInitialNodeMustEndInFinalNode_empty() {
  validate();
  assertNoProblem('AllPathsFromInitialNodeMustEndInFinalNode');
}

@test
operation InitialNode_AllPathsFromInitialNodeMustEndInFinalNode_singleInitial() {
  sp.newInitial();
  validate();
  assertHasProblem('AllPathsFromInitialNodeMustEndInFinalNode');
}

@test
operation InitialNode_AllPathsFromInitialNodeMustEndInFinalNode_onePathWithoutFinal() {
  sp.newInitial().newAction().newAction();
  validate();
  assertHasProblem('AllPathsFromInitialNodeMustEndInFinalNode');
}

@test
operation InitialNode_AllPathsFromInitialNodeMustEndInFinalNode_onePathWithFinal() {
  sp.newInitial().newAction().newAction().newFinal();
  validate();
  assertNoProblem('AllPathsFromInitialNodeMustEndInFinalNode');
}

@test
operation InitialNode_AllPathsFromInitialNodeMustEndInFinalNode_onePathWithFinalAfterObjectFlow() {
  var a = sp.newInitial().newAction();
  var f = sp.newFinal();
  a.linkToObject(f);
  validate();
  assertHasProblem('AllPathsFromInitialNodeMustEndInFinalNode');
}

@test
operation InitialNode_AllPathsFromInitialNodeMustEndInFinalNode_onePathWithFinal_onePathWithoutFinal() {
  var f = sp.newInitial().newFork();
  f.newAction().newAction().newFinal();
  f.newAction();
  validate();
  assertHasProblem('AllPathsFromInitialNodeMustEndInFinalNode');
}

@test
operation InitialNode_AllPathsFromInitialNodeMustEndInFinalNode_twoPathsWithFinal() {
  var f = sp.newInitial().newFork();
  f.newAction().newAction().newFinal();
  f.newAction().newFinal();
  validate();
  assertNoProblem('AllPathsFromInitialNodeMustEndInFinalNode');
}

@test
operation InitialNode_NoIncomingForInitialNode_noIncoming() {
  sp.newInitial();
  validate();
  assertNoProblem('NoIncomingForInitialNode');
}

@test
operation InitialNode_NoIncomingForInitialNode_oneIncoming() {
  sp.newAction().linkTo(sp.newInitial());
  validate();
  assertHasProblem('NoIncomingForInitialNode');
}

@test
operation InitialNode_NoIncomingForInitialNode_twoIncoming() {
  var ini = sp.newInitial();
  sp.newAction().linkTo(ini);
  sp.newAction().linkTo(ini);
  validate();
  assertHasProblem('NoIncomingForInitialNode');
}

@test
operation InitialNode_AtLeastOneActivityNodeBetweenInitialAndFinalNodes_without() {
  sp.newInitial().newFinal();
  validate();
  assertHasProblem('AtLeastOneActivityNodeBetweenInitialAndFinalNodes');
}

@test
operation InitialNode_AtLeastOneActivityNodeBetweenInitialAndFinalNodes_with() {
  sp.newInitial().newAction().newFinal();
  validate();
  assertNoProblem('AtLeastOneActivityNodeBetweenInitialAndFinalNodes');
}

@test
operation InitialNode_NoCyclesCompleteGraph_noCycles() {
  sp.newInitial().newAction().newAction().newFinal();
  validate();
  assertNoProblem('NoCyclesCompleteGraph');
}

@test
operation InitialNode_NoCyclesCompleteGraph_withCycles() {
  var a1 = sp.newInitial();
  var a2 = a1.newAction();
  a2.newAction().newFinal();
  a2.linkTo(a1);
  validate();
  assertHasProblem('NoCyclesCompleteGraph');
}

@test
operation FinalNode_NoOutgoingForFinalNode_noOutgoing() {
  sp.newFinal();
  validate();
  assertNoProblem('NoOutgoingForFinalNode');
}

@test
operation FinalNode_NoOutgoingForFinalNode_oneOutgoing() {
  sp.newFinal().newAction();
  validate();
  assertHasProblem('NoOutgoingForFinalNode');
}

@test
operation NamedElement_NameMustNotBeEmpty_noName() {
  sp.newAction().name = null;
  validate();
  assertHasProblem('NameMustNotBeEmpty');
}

@test
operation NamedElement_NameMustNotBeEmpty_withName() {
  sp.newAction().name = 'Foo';
  validate();
  assertNoProblem('NameMustNotBeEmpty');
}

@test
operation ForkNode_MoreThanOneOutgoingFlowWithFix_oneOutgoing() {
  sp.newInitial().newFork().newAction();
  validate();
  assertHasProblem('MoreThanOneOutgoingFlowWithFix');
}

@test
operation ForkNode_MoreThanOneOutgoingFlowWithFix_twoOutgoing() {
  var f = sp.newFork();
  f.newAction();
  f.newAction();
  validate();
  assertNoProblem('MoreThanOneOutgoingFlowWithFix');
}

@test
operation JoinNode_MoreThanOneIncomingFlow_oneIncoming() {
  sp.newAction().newJoin().newAction();
  validate();
  assertHasProblem('MoreThanOneIncomingFlow');
}

@test
operation JoinNode_MoreThanOneIncomingFlow_twoIncoming() {
  var a1 = sp.newAction();
  var j = a1.newJoin();
  var a2 = sp.newAction();
  a2.linkTo(j);
  validate();
  assertNoProblems(Sequence {'MaximumOneIncoming', 'MoreThanOneIncomingFlow'});
}

@test
operation JoinNode_JoinedBranchesMustPairwiseHaveSameLCA_onePath() {
  sp.newInitial().newAction().newFinal();
  validate();
  assertNoProblem('JoinedBranchesMustPairwiseHaveSameLCA');
}

@test
operation JoinNode_JoinedBranchesMustPairwiseHaveSameLCA_twoForkedPaths() {
  var f = sp.newAction().newFork();
  var j = sp.newJoin();
  j.newAction();
  f.newAction().linkTo(j);
  f.newAction().linkTo(j);
  validate();
  assertNoProblem('JoinedBranchesMustPairwiseHaveSameLCA');
}

// add test for checking that branches from a decisionnode cannot be joined on a joinnode and same with the fork/merge pairs

@test
operation JoinNode_JoinedBranchesMustPairwiseHaveSameLCA_joinCannotBeLCAOfDecision() {
  var d = sp.newAction().newDecision();
  var j = sp.newJoin();
  j.newAction();
  d.newAction().linkTo(j);
  d.newAction().linkTo(j);
  validate();
  assertNoProblem('JoinedBranchesMustPairwiseHaveSameLCA');
  assertHasProblem('JoinLCAMustBeFork');
}

@test
operation JoinNode_JoinedBranchesMustPairwiseHaveSameLCA_noCommonLCA() {
  var j = sp.newAction().newFork().newAction().newJoin();
  j.newAction();
  sp.newAction().newFork().newAction().linkTo(j);
  validate();
  assertHasProblem('JoinedBranchesMustPairwiseHaveSameLCA');
}

@test
operation JoinNode_JoinedBranchesMustPairwiseHaveSameLCA_differentLCA() {
  var d = sp.newAction().newDecision();
  var f = d.newFork();
  var j = f.newAction().newJoin();
  f.newAction().linkTo(j);
  d.newAction().linkTo(j);
  j.newAction();
  validate();
  assertHasProblem('JoinedBranchesMustPairwiseHaveSameLCA');
}

@test
operation JoinNode_JoinedBranchesMustPairwiseHaveSameLCA_samePairwiseLCA() {
  var d = sp.newAction().newDecision();
  var f = d.newFork();
  var j = f.newAction().newJoin();
  f.newAction().linkTo(j);
  var m = j.newMerge();
  d.newAction().linkTo(m); 
  validate();
  assertNoProblems(Sequence {'JoinedBranchesMustPairwiseHaveSameLCA', 'JoinLCAMustBeFork', 'MergeLCAMustBeDecision'});
}

// MergeNode

@test
operation MergeNode_MoreThanOneIncomingFlow_oneIncoming() {
  sp.newAction().newMerge().newAction();
  validate();
  assertHasProblem('MoreThanOneIncomingFlow');
}

@test
operation MergeNode_MoreThanOneIncomingFlow_twoIncoming() {
  var a1 = sp.newAction();
  var j = a1.newMerge();
  var a2 = sp.newAction();
  a2.linkTo(j);
  validate();
  assertNoProblems(Sequence {'MaximumOneIncoming', 'MoreThanOneIncomingFlow'});
}

@test
operation MergeNode_JoinedBranchesMustPairwiseHaveSameLCA_mergeCannotBeLCAOfFork() {
  var f = sp.newAction().newFork();
  var j = sp.newMerge();
  j.newAction();
  f.newAction().linkTo(j);
  f.newAction().linkTo(j);
  validate();
  assertNoProblem('JoinedBranchesMustPairwiseHaveSameLCA');
  assertHasProblem('MergeLCAMustBeDecision');
}

@test
operation MergeNode_JoinedBranchesMustPairwiseHaveSameLCA_twoConditionalPaths() {
  var d = sp.newAction().newDecision();
  var j = sp.newMerge();
  j.newAction();
  d.newAction().linkTo(j);
  d.newAction().linkTo(j);
  validate();
  assertNoProblem('JoinedBranchesMustPairwiseHaveSameLCA');
}

@test
operation MergeNode_JoinedBranchesMustPairwiseHaveSameLCA_noCommonLCA() {
  var j = sp.newAction().newDecision().newAction().newMerge();
  j.newAction();
  sp.newAction().newDecision().newAction().linkTo(j);
  validate();
  assertHasProblem('JoinedBranchesMustPairwiseHaveSameLCA');
}

// DecisionNode

@test
operation DecisionNode_TotalProbabilityIsOne_noOutgoing() {
  sp.newDecision();
  validate();
  assertHasProblem('TotalProbabilityIsOne');
}

@test
operation DecisionNode_TotalProbabilityIsOne_oneOutgoingSumOne() {
  var d = sp.newDecision();
  sp.newAction().linkFrom(d, 'a', 1.0d);
  validate();
  assertNoProblem('TotalProbabilityIsOne');
}

@test
operation DecisionNode_TotalProbabilityIsOne_oneOutgoingSumLessThanOne() {
  var d = sp.newDecision();
  var e = sp.newAction().linkFrom(d, 'a', 0.5d);
  validate();
  assertHasProblem('TotalProbabilityIsOne');
}

@test
operation DecisionNode_TotalProbabilityIsOne_twoOutgoingSumOne() {
  var d = sp.newDecision();
  sp.newAction().linkFrom(d, 'a', 0.3d);
  sp.newAction().linkFrom(d, 'b', 0.7d);
  validate();
  assertNoProblem('TotalProbabilityIsOne');
}

@test
operation DecisionNode_TotalProbabilityIsOne_twoOutgoingSumLessThanOne() {
  var d = sp.newDecision();
  sp.newAction().linkFrom(d, 'a', 0.4d);
  sp.newAction().linkFrom(d, 'b', 0.4d);
  validate();
  assertHasProblem('TotalProbabilityIsOne');
}

@test
operation DecisionNode_TotalProbabilityIsOne_twoOutgoingSumMoreThanOne() {
  var d = sp.newDecision();
  sp.newAction().linkFrom(d, 'a', 0.6d);
  sp.newAction().linkFrom(d, 'b', 0.6d);
  validate();
  assertHasProblem('TotalProbabilityIsOne');
}

@test
operation ObjectNode_noIncomingAndNoOutgoing() {
  sp.newObject();
  validate();
  assertHasProblems(Sequence {'MinimumOneIncomingObjectFlow', 'MinimumOneOutgoingObjectFlow'});
  assertNoProblems(Sequence {'NoIncomingControlFlows', 'NoOutgoingControlFlows'});
}

@test
operation ObjectNode_onlyIncoming() {
  var a = sp.newAction();
  var o = sp.newObject();
  a.linkToObject(o);
  validate();
  assertNoProblems(Sequence {'MinimumOneIncomingObjectFlow', 'NoIncomingControlFlows', 'NoOutgoingControlFlows'});
  assertHasProblem('MinimumOneOutgoingObjectFlow');
}

@test
operation ObjectNode_onlyOutgoing() {
  var a = sp.newAction();
  var o = sp.newObject();
  o.linkToObject(a);
  validate();
  assertHasProblem('MinimumOneIncomingObjectFlow');
  assertNoProblems(Sequence {'MinimumOneOutgoingObjectFlow', 'NoIncomingControlFlows', 'NoOutgoingControlFlows'});
}

@test
operation ObjectNode_bothIncomingAndOutgoing() {
  var a = sp.newAction();
  var o = sp.newObject();
  var b = sp.newAction();
  a.linkToObject(o);
  o.linkToObject(b);
  validate();
  assertNoProblems(Sequence {'MinimumOneIncomingObjectFlow', 'MinimumOneOutgoingObjectFlow', 'NoIncomingControlFlows', 'NoOutgoingControlFlows'});
}

@test
operation ObjectNode_incomingControlFlow() {
  var a = sp.newAction();
  var o = sp.newObject();
  a.linkTo(o);
  validate();
  assertHasProblem('NoIncomingControlFlows');
  assertNoProblem('NoOutgoingControlFlows');
}

@test
operation ObjectNode_outgoingControlFlow() {
  var a = sp.newAction();
  var o = sp.newObject();
  o.linkTo(a);
  validate();
  assertNoProblem('NoIncomingControlFlows');
  assertHasProblem('NoOutgoingControlFlows');
}

@test
operation StructuredActivityNode_emptyIsOK() {
  var a = sp.newSActivity();
  validate();
  assertNoProblem('AtMostOneNestedInitial');
}

@test
operation StructuredActivityNode_oneIsOK() {
  var a = sp.newSActivity();
  a.newInitial();
  validate();
  assertNoProblem('AtMostOneNestedInitial');
}

@test
operation StructuredActivityNode_twoIsBad() {
  var a = sp.newSActivity();
  a.newInitial();
  a.newInitial();
  validate();
  assertHasProblem('AtMostOneNestedInitial');
}


@test
operation ServiceProcess_namesShouldBeUnique_empty() {
  validate();
  assertNoProblem('NamesShouldBeUnique');
}

@test
operation ServiceProcess_namesShouldBeUnique_one() {
  sp.newAction('A');
  validate();
  assertNoProblem('NamesShouldBeUnique');
}

@test
operation ServiceProcess_namesShouldBeUnique_twoUnique() {
  sp.newAction('A');
  sp.newAction('B');
  validate();
  assertNoProblem('NamesShouldBeUnique');
}

@test
operation ServiceProcess_namesShouldBeUnique_twoNotUnique() {
  sp.newAction('A');
  sp.newAction('A');
  validate();
  assertHasProblem('NamesShouldBeUnique');
}

// TEST TEMPLATES //

operation weightTest(w : Real) {
  var sp = new SP!ServiceProcess;
  var lpa = new SP!LocalPerformanceAnnotation;
  lpa.weight = w;
  sp.nodes.add(lpa);
  validate();
}

operation minTimeTest(minTime : Real) {
  var sp = new SP!ServiceProcess;
  var lpa = new SP!LocalPerformanceAnnotation;
  lpa.minimumTime = minTime;
  sp.nodes.add(lpa);
  validate();
}

operation repTest(reps : Real) {
  var sp = new SP!ServiceProcess;
  var lpa = new SP!LocalPerformanceAnnotation;
  lpa.reps = reps;
  sp.nodes.add(lpa);
  validate();
}

operation conditionProbabilityTest(prob : Real) {
  var sp = new SP!ServiceProcess;
  var a = new SP!DecisionNode;
  var b = new SP!Action;
  sp.nodes.add(a);
  sp.nodes.add(b);
  var e = a.linkTo(b);
  e.condition = 'foo';
  e.probability = prob;
 
  validate();
}

// SERVICE PROCESS OPERATIONS //

operation SP!ServiceProcess newAction() : SP!Action {
  var n = new SP!Action;
  self.nodes.add(n);
  return n;
}

operation SP!ServiceProcess newAction(name: String) {
  var a = self.newAction();
  a.name = name;
  return a;
}

operation SP!ServiceProcess newDecision() : SP!DecisionNode {
  var n = new SP!DecisionNode;
  self.nodes.add(n);
  return n;
}

operation SP!ServiceProcess newFinal() : SP!FinalNode {
  var n = new SP!FinalNode;
  self.nodes.add(n);
  return n;
}

operation SP!ServiceProcess newFork() : SP!ForkNode {
  var n = new SP!ForkNode;
  self.nodes.add(n);
  return n;
}

operation SP!ServiceProcess newInitial() : SP!InitialNode {
  var n = new SP!InitialNode;
  self.nodes.add(n);
  return n;
}

operation SP!ServiceProcess newJoin() : SP!JoinNode {
  var n = new SP!JoinNode;
  self.nodes.add(n);
  return n;
}

operation SP!ServiceProcess newMerge() : SP!MergeNode {
  var n = new SP!MergeNode;
  self.nodes.add(n);
  return n;
}

operation SP!ServiceProcess newObject() : SP!ObjectNode {
  var n = new SP!ObjectNode;
  self.nodes.add(n);
  return n;
}

operation SP!ServiceProcess newSActivity() : SP!StructuredActivityNode {
  var n = new SP!StructuredActivityNode;
  self.nodes.add(n);
  return n;
}

// STRUCTURED NODE OPERATIONS //

operation SP!StructuredActivityNode newAction() : SP!Action {
  var a = new SP!Action;
  self.nodes.add(a);
  return a;
}

operation SP!StructuredActivityNode newInitial() : SP!InitialNode {
  var a = new SP!InitialNode;
  self.nodes.add(a);
  return a;
}

// ACTIVITY NODE OPERATIONS //

operation SP!ActivityNode newAction() : SP!Action {
  return self.linkTo(self.eContainer.newAction()).target;
}

operation SP!ActivityNode newDecision() : SP!DecisionNode {
  return self.linkTo(self.eContainer.newDecision()).target;
}

operation SP!ActivityNode newFinal() : SP!FinalNode {
  return self.linkTo(self.eContainer.newFinal()).target;
}

operation SP!ActivityNode newFork() : SP!ForkNode {
  return self.linkTo(self.eContainer.newFork()).target;
}

operation SP!ActivityNode newJoin() : SP!JoinNode {
  return self.linkTo(self.eContainer.newJoin()).target;
}

operation SP!ActivityNode newObject() : SP!ObjectNode {
  return self.linkTo(self.eContainer.newObject()).target;
}

operation SP!ActivityNode newSActivity() : SP!StructuredActivityNode {
  return self.linkTo(self.eContainer.newSActivity()).target;
}

operation SP!ActivityNode newMerge() : SP!MergeNode {
  return self.linkTo(self.eContainer.newMerge()).target;
}

operation SP!ActivityNode linkTo(other : SP!ActivityNode, condition : String, prob : Real) : SP!ControlFlow {
  var edge = self.linkTo(other);
  edge.condition = condition;
  edge.probability = prob;
  return edge;
}

operation SP!ActivityNode linkFrom(other : SP!ActivityNode, condition : String, prob : Real) : SP!ControlFlow {
  return other.linkTo(self, condition, prob);
}

operation SP!ActivityNode linkToObject(other : SP!ActivityNode) : SP!ObjectFlow {
  var sp = SP!ServiceProcess.all.first;
  var edge = new SP!ObjectFlow;
  edge.source = self;
  edge.target = other;
  sp.edges.add(edge);
  return edge;
}

operation SP!ActivityNode linkTo(other : SP!ActivityNode) : SP!ControlFlow {
  var sp = SP!ServiceProcess.all.first;
  var edge = new SP!ControlFlow;
  edge.source = self;
  edge.target = other;
  sp.edges.add(edge);
  return edge;
}

operation SP!ActivityNode linkFrom(other : SP!ActivityNode) : SP!ControlFlow {
  return other.linkTo(self);
}