// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.uca.b2mml.controllers.capability;

import es.uca.b2mml.controllers.capability.EquipmentCapabilityController;
import es.uca.b2mml.domain.capability.EquipmentCapability;
import es.uca.b2mml.domain.capability.ProductionCapability;
import es.uca.b2mml.domain.equip.Equipment;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect EquipmentCapabilityController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String EquipmentCapabilityController.create(@Valid EquipmentCapability equipmentCapability, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, equipmentCapability);
            return "equipmentcapabilities/create";
        }
        uiModel.asMap().clear();
        equipmentCapability.persist();
        return "redirect:/equipmentcapabilities/" + encodeUrlPathSegment(equipmentCapability.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String EquipmentCapabilityController.createForm(Model uiModel) {
        populateEditForm(uiModel, new EquipmentCapability());
        List<String[]> dependencies = new ArrayList<String[]>();
        if (Equipment.countEquipments() == 0) {
            dependencies.add(new String[] { "equipment", "equipments" });
        }
        if (ProductionCapability.countProductionCapabilities() == 0) {
            dependencies.add(new String[] { "productioncapability", "productioncapabilities" });
        }
        uiModel.addAttribute("dependencies", dependencies);
        return "equipmentcapabilities/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String EquipmentCapabilityController.show(@PathVariable("id") Long id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("equipmentcapability", EquipmentCapability.findEquipmentCapability(id));
        uiModel.addAttribute("itemId", id);
        return "equipmentcapabilities/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String EquipmentCapabilityController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("equipmentcapabilities", EquipmentCapability.findEquipmentCapabilityEntries(firstResult, sizeNo));
            float nrOfPages = (float) EquipmentCapability.countEquipmentCapabilities() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("equipmentcapabilities", EquipmentCapability.findAllEquipmentCapabilities());
        }
        addDateTimeFormatPatterns(uiModel);
        return "equipmentcapabilities/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String EquipmentCapabilityController.update(@Valid EquipmentCapability equipmentCapability, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, equipmentCapability);
            return "equipmentcapabilities/update";
        }
        uiModel.asMap().clear();
        equipmentCapability.merge();
        return "redirect:/equipmentcapabilities/" + encodeUrlPathSegment(equipmentCapability.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String EquipmentCapabilityController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, EquipmentCapability.findEquipmentCapability(id));
        return "equipmentcapabilities/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String EquipmentCapabilityController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        EquipmentCapability equipmentCapability = EquipmentCapability.findEquipmentCapability(id);
        equipmentCapability.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/equipmentcapabilities";
    }
    
    void EquipmentCapabilityController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("equipmentCapability_starttime_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("equipmentCapability_endtime_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
    }
    
    String EquipmentCapabilityController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
