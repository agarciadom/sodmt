-*
  Heuristic algorithm for computing local time limits from global
  time limits. Uses an alternative formulation to the first version
  which does not require all paths to be enumerated. 

  Copyright (c) 2010-2013 Antonio García Domínguez.  All rights
  reserved. This program and the accompanying materials are made
  available under the terms of the Eclipse Public License v1.0 which
  accompanies this distribution, and is available at
  http://www.eclipse.org/legal/epl-v10.html

  Contributors:
     Antonio García Domínguez - initial API and implementation
*-

import 'utils.eol';

-*********** TIME DISTRIBUTION ***********-

operation distributeTime(globalLimit : Real, endNodes : Collection) : Boolean {
  -- Compute c(e) = P'_S(g(e)) and M_m(v) all over the graph
  var aggregateResults = aggregateConstraints(globalLimit, endNodes);
  if (aggregateResults == null) {
    return false;
  }
  -- The return value is a pair (s, P'_S(s)), where s is the source of the graph.
  var initial = aggregateResults.first();
  var strictestGraphConstraints := aggregateResults.second();
  var strictestGraphConstraint  := strictestGraphConstraints.sortBy(e|e.slackPerWU(globalLimit)).first();

  return distributeTime(initial, globalLimit, strictestGraphConstraint);
}

operation distributeTime(v : ActivityNode, T : Real, c_pms : Sequence) : Boolean {
  var M_m   = v.~maxMinTimeLimit;

  if (T + 0.0001 < M_m) {
    System.user.inform("The maximum sum of minimum time limits from " + v + " (" + M_m + ") is greater than the available time (" + T + ")");
    return false;
  }
  else if (isApproximatelyEqual(T, c_pms.first(), 0.0001) and c_pms.last() > 0) {
    System.user.inform("The manual time limits have used up all the time: no slack left to distribute");
    return false;
  }

  var newLimit = v.getMinimumTime() + c_pms.slackPerWU(T) * v.getWeight();
  v.setTimeLimit(newLimit);
  v.~visited = true;

  var remainingTime = T - newLimit * v.getRepetitions();
  var outEdges      = v.getOutEdgesFromMostToLeastStrict(remainingTime);
  for (edge in outEdges) {
     var target = edge.target;

     if (target.~visited.isDefined()) {
        -- Another edge from a previous and stricter path has reached the target before:
        -- do we need to reflow some extra time back, or not?
        var prevEdges = target.incoming.select(e|e <> edge and e.~distributedTime.isDefined());
        var previousTime = prevEdges.first().~distributedTime;
        if (previousTime < remainingTime) {
          -- We have some extra time: we can try to reuse it, starting from the source of
          -- the current edge and going back up the graph.
          reuseSurplusTime(remainingTime - previousTime, edge.source);
        }
        -- If previousTime >= available, we do nothing: the previous edge was from a
        -- stricter or just as strict path, that's all.

        -- Ensure all visted incoming edges of the target report the same
        -- distributed time.
        edge.~distributedTime = previousTime;
    }
    else {
      edge.~distributedTime = remainingTime;
      if (not distributeTime(target, remainingTime, edge.~constraint)) {
        return false;
      }
    }
  }

  return true;
}

-- Backs up starting at a node, trying to reuse extra time without disturbing other paths.
operation reuseSurplusTime(slack : Real, start : ActivityNode) {
  var backNodes : Sequence;
  var totalWeight = 0;
  var current = start;

  -- We can only add a node if it has only 1 outgoing edge, and we can only
  -- back up if the previous node has only 1 incoming edge, though. Otherwise,
  -- we risk getting inconsistent results.
  while (current.outgoing.size() = 1) {
    if (current.getWeight() > 0) {
      backNodes.add(current);
      totalWeight = totalWeight + current.getWeight() * current.getRepetitions();
    }
    if (current.incoming.size() = 1) {
      current = current.incoming.first().source;
    }
    else {
      break;
    }
  }
  if (totalWeight = 0) {
    return;
  }

  -- Distribute the time according to the weights of each node.
  for (node in backNodes) {
    node.setTimeLimit(node.getTimeLimit() + node.getWeight()/totalWeight * slack);
  }
}

-*
  Returns the outgoing edges of the current node, sorted according to their
  slack per unit of weight in ascending order.
*-
$pre self.outgoing.forAll(e|not e.~constraint.isDefined())
operation ActivityNode getOutEdgesFromMostToLeastStrict(received : Real) : Sequence {
  for (edge in self.outgoing) {
    edge.~constraint = edge.~constraints.sortBy(c|c.slackPerWU(received)).first();
  }
  return self.outgoing.sortBy(e | e.~constraint.slackPerWU(received));
}

-*********** CONSTRAINT AGGREGATION ***********-

-*
  Aggregates the constraints from each node in the graph, returning a pair
  (n_i, [(t_1, w_1)...]), where n_i is the initial node and [(t, w)] are the
  constraints of the strictest path(s) between the source and a sink. Each edge
  has been annotated with the strictest constraints of all the paths that start
  at their target.

  If the initial node (node with no incoming edges) does not exist, this operation
  displays an error message and returns null.
*-
$pre not endNodes.isEmpty()
$pre endNodes.forAll(e|e.outgoing.isEmpty())
$post _result = null or (_result.size() = 2 and _result.first().isKindOf(ActivityNode) and not _result.last().isEmpty() and _result.last().forAll(e|e.forAll(f|f>=0)))
operation aggregateConstraints(globalLimit : Real, endNodes : Collection) : Sequence {

  -- Create stack for traversing the nodes
  var stack : Sequence;
  stack.addAll(endNodes);

  while (not stack.isEmpty()) {
    -- Take the top of the stack
    var currentNode : ActivityNode = stack.popLast();

    -- Skip this node for now if not all outgoing edges have been visited yet.
    -- We will visit it later through another edge.
    if (currentNode.outgoing.exists(e|not e.~constraints.isDefined())) {
      continue;
    }

    -- Reset any existing constraints
    currentNode.setTimeLimit(0.0d);

    -- Annotate the current node with M_m(v) = m(p_{Mm}(v)), the maximum
    -- minimum time limit of every path starting at the current node.
    var maxMinTimeLimitChildren = 0.0d;
    if (not currentNode.outgoing.isEmpty()) {
      maxMinTimeLimitChildren := currentNode.outgoing
          .collect(e|e.target.~maxMinTimeLimit)
          .sortBy(e|e)
          .last();
    }
    currentNode.~maxMinTimeLimit = currentNode.getMinimumTime() * currentNode.getRepetitions() + maxMinTimeLimitChildren;

    -- Compute the constraints of the paths in P'_S(v), the subset of P_S(v) (all paths
    -- from v to a sink) which excludes the paths that are less or just as strict as some
    -- other path in P_S(v).
    var constraints : Sequence;
    for (edge in currentNode.outgoing) {
      for (edgeConstraint in edge.~constraints) {
        var constraint = edgeConstraint.addConstraint(
          currentNode.getMinimumTime() * currentNode.getRepetitions(),
          currentNode.getWeight() * currentNode.getRepetitions());
        var cmp = 0;

        -- We cannot use a for loop, as we're filtering and traversing
        -- the constraints at the same time
        var i = 0;
        while (cmp <> 1 and i < constraints.size()) {
          -*
             Comparison results:
             0 -> not comparable (both should be kept)
            -1 -> first one is stricter  (remove second one from list)
             1 -> second one is stricter (do not add this constraint)
          *-
          cmp = compareConstraints(globalLimit, constraint, constraints.get(i));
          if (cmp = -1) {
            constraints.removeAt(i);
          }
          else {
            i = i + 1;
          }
        }
        -- If no constraint is always stricter than this one, add it
        if (cmp <> 1) {
          constraints.add(constraint);
        }
      } -- for (edge)
    } -- for (constraint)
    if (constraints.isEmpty()) {
      constraints.add(Sequence {
      	currentNode.getMinimumTime() * currentNode.getRepetitions(),
      	currentNode.getWeight() * currentNode.getRepetitions()});
    }

    -- Propagate the constraints to the edges
    for (incoming in currentNode.incoming) {
      incoming.~constraints = constraints;
      stack.add(incoming.source);
    }

    -- Check if we're done or not
    if (currentNode.incoming.isEmpty()) {
      -- Current node is the initial one and all outgoing edges have been visited: we are done.
      return Sequence { currentNode, constraints };
    }
  }

  System.user.inform("ERROR: no initial node found");
  return null;
}

-* Compares two constraints. Returns -1 if the first constraint is stricter
   than the second one, 0 if they are not comparable, and 1 if the first
   constraint is less or just as strict as the second one. *-
$pre first.forAll(e|e>=0)
$pre second.forAll(e|e>=0)
$pre L >= 0
$post _result >= -1
$post _result <=  1
operation compareConstraints(L : Real, first : Sequence, second : Sequence) : Integer {

  -- Extract components from each constraint
  var a = first.get(0);
  var b = first.get(1);
  var c = second.get(0);
  var d = second.get(1);

  -- Precompute two useful values for the two constraints
  var leftCmpExpr  = (b-d)*L;
  var rightCmpExpr = b*c-a*d;

  -- ¿(a,b) <= (c,d)?
  if (a <= c and (b <= d or (a < L and b > d and leftCmpExpr <= rightCmpExpr))) {
    return 1;
  }

  -- (a,b) <= (c,d) is false, and <= is antisymmetric: if (c,d) <= (a,b), then (c,d) < (a,b)
  if(c <= a and (d <= b or (c < L and d > b and -leftCmpExpr <= -rightCmpExpr))) {
    return -1;
  }

  -- Neither: the two pairs are not comparable
  return 0;
}

-- Adds an unpacked constraint to another, generating a new one
$pre self.size() = 2
$post _result.size() = 2
operation Sequence addConstraint(time : Real, weight : Real) : Sequence {
  var sum = self.clone();
  sum.set(0, sum.get(0) + time);
  sum.set(1, sum.get(1) + weight);
  return sum;
}

-- Adds a packed constraint to another, generating a new one
$pre self.size() = 2
$pre cons.size() =2
$post _result.size() = 2
operation Sequence addConstraint(cons : Sequence) : Sequence {
  var sum = self.clone();
  sum.set(0, sum.get(0) + cons.get(0));
  sum.set(1, sum.get(1) + cons.get(1));
  return sum;
}
