import 'test-common.eol';
import 'platform:/resource/es.uca.modeling.eol.marte/eol/throughput.eol';

$onlyWith Map { "Model" = "MultiDiagram" }
$onlyWith Map { "Model" = "UML" }
@test
operation handleOrder() {
  var throughputMap := computeThroughputs("Handle Order");
  assertThroughput(throughputMap, "Evaluate Order", 1.0);
  assertThroughput(throughputMap, "Create Invoice", 0.8);
  assertThroughput(throughputMap, "Perform Payment", 0.8);
  assertThroughput(throughputMap, "Ship Order", 0.8);
  assertThroughput(throughputMap, "Close Order", 1.0);
}

$onlyWith Map { "Model" = "MultiDiagram" }
@test
operation evaluateOrder() {
  var throughputMap := computeThroughputs("Evaluate Order");
  assertThroughput(throughputMap, "Create Order", 5.0);
  assertThroughput(throughputMap, "List Warehouses", 5.0);
  assertThroughput(throughputMap, "Select Next Order Item", 5.0);
  assertThroughput(throughputMap, "Check Stock", 5.0);
  assertThroughput(throughputMap, "Remove Warehouse", 2);
  assertThroughput(throughputMap, "Select Closest Warehouse", 4.0);
  assertThroughput(throughputMap, "Accept Order", 4.0);
  assertThroughput(throughputMap, "Reject Order", 1.0);
}

$onlyWith Map { "Model" = "UML" }
@test
operation seqWithReps() {
  var throughputMap := computeThroughputs("SequenceWithRepetitions");
  assertThroughput(throughputMap, "A", 1.0);
  assertThroughput(throughputMap, "B", 1.0);
  assertThroughput(throughputMap, "C", 1.0);
}

operation assertThroughput(throughputMap : Map, activityName : String, expectedThroughput : Real) {
  assertEquals("Throughput for " + activityName + " should be " + expectedThroughput, expectedThroughput, throughputMap.get(activityName), 10);
}

operation computeThroughputs(activityName : String) : Map {
  assertTrue("Annotation was successful", annotateThroughput(getStartNode(activityName)));
  return computeThroughputMap(activityName);
}

operation computeThroughputMap(activityName : String) : Map {
  var activity  := getActivity(activityName);
  var vslTool   := activity.getVSLTool();
  var throughputMap : Map;
  for (execNode in ExecutableNode.all) {
    if (execNode.getStep().isUndefined()) {
      continue;
    }
    var throughput := execNode.getThroughput();
    if (throughput.isDefined()) {
      throughputMap.put(execNode.name, throughput);
      ("Throughput of " + execNode.name + ": " + throughput).println();
    }
  }
  return throughputMap;
}
