[% import 'platform:/plugin/es.uca.modeling.performance.sodmt.eol/eol/utils.eol'; %]
# Activities
set A;

# Paths
set P;

# Global time limit
param G;

# Minimum times
param m{a in A};

# Weights
param w{a in A};

# Paths
param paths{a in A, p in P};

# Minimum time of each path
param mp{p in P} := sum{a in A} paths[a, p] * m[a];

# Total weight of each path
param tw{p in P} := sum{a in A} paths[a, p] * w[a];

# Strictest lower bound by task
param slb{a in A} := m[a] + min{p in P} (G-mp[p])/tw[p] * w[a];

# Time limit for each activity (must be positive)
var tl{a in A} >= 0.0001;

# Objective function: use as much time as possible
maximize usage: sum{a in A, p in P} tl[a] * paths[a, p];

# Restrictions by path
s.t. lpath 'limit by path' {p in P}: sum{a in A} paths[a, p] * tl[a] <= G;

# Restrictions by task
s.t. ltask 'limit by task' {a in A}: tl[a] >= slb[a];

data;

[%
  var allPaths : Sequence;
  for (seq in getAllExecutionPathsFrom(InitialNode.all.first)) {
    var newSet : Set;
    newSet.addAll(seq);
    allPaths.add(newSet);
  }

  var nodeCounter = 1;
  var nodeToNumber : Map; 
  for (task in ExecutableNode.all) {
     nodeToNumber.put(task, nodeCounter); %]
# [%=task.name%] -> t_[%=nodeCounter%]
[% nodeCounter = nodeCounter + 1; } %]

set A := [%=Model!ExecutableNode.all.collect(n | 't_' + nodeToNumber.get(n)).concat(' ')%];

set P := [%=allPathIdentifiers(allPaths.size)%];

param G := [%=InitialNode.all.first.getGlobalTimeLimit()%];

param m :=
[% for (task in ExecutableNode.all) {%]
  t_[%=nodeToNumber.get(task)%]	[%=task.getMinimumTime()%]
[% } %];

param w :=
[% for (task in ExecutableNode.all) {%]
  t_[%=nodeToNumber.get(task)%] [%=task.getWeight()%]
[% } %]

param paths : [%=allPathIdentifiers(allPaths.size)%] :=
[% for (task in ExecutableNode.all) {%]
  t_[%=nodeToNumber.get(task)%] [%=allPaths.collect(p|bool2num(p.contains(task))).concat(' ')%]
[% } %];

end;

[%
operation allPathIdentifiers(n: Integer): String {
  return 1.to(n).collect(x | 'p_' + x).concat(' ');
}

operation bool2num(flag: Boolean): Integer {
  if (flag) return 1; else return 0;
}
%]