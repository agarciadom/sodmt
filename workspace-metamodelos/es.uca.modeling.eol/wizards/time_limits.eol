-*
  Heuristic algorithm for computing the time limits in seconds for
  each activity node in the ServiceComposition and ServiceProcess
  models.

  Copyright (c) 2009-2010 Antonio García Domínguez.  All rights
  reserved. This program and the accompanying materials are made
  available under the terms of the Eclipse Public License v1.0 which
  accompanies this distribution, and is available at
  http://www.eclipse.org/legal/epl-v10.html

  Contributors:
     Antonio García Domínguez - initial API and implementation

  This algorithm annotates every executable node with an estimation of
  the maximum time that it can take to run so the whole service
  activity is completed before a specific time interval has
  elapsed. If the node already has a manual restriction applied to it,
  it will also make sure that a consistent solution can be achieved.
  Unless explicitly told otherwise, it assumes that all executable
  nodes in every path should take around the same time. The actual time
  will vary depending on the structure of the graph and the manual
  time constraints.

  IMPORTANT: the model must have been validated with the EVL script in
  es.uca.modeling.validation and pass with no errors.

  We need to define the concept of a "free node". A free node is an
  executable node that doesn't have a manual performance annotation
  set to it. In addition, free nodes can be updatable to a new time
  limit iff the new limit is lower or equal than the old one.

  The algorithm is an iterative process, which may fail in some cases
  (i.e. conflicting manual performance annotations). Its steps are as
  follows:

  - Relax all automatic restrictions set in place from the previous
    run of this algorithm with an absurdly high time limit. We cannot
    just remove them, as they would be removed from the diagrams and
    the user would have to properly place them again.

  - Obtain a list of all paths between the initial node and the final
    nodes. It would be impossible to get a finite list out of a graph
    with cycles, but the EVL validation script ensures the graph is
    acyclic, precisely for this reason.

  - Sort the list in descending order by an estimation of the time
    which would be assigned to each node in the path in absence of
    other paths. This ensures the algorithm produces correct results
    and saves us from having to look at previous paths while annotating
    some path, since the previous paths were always at least as restrictive
    as the current one.

  - For each path in the list:

    * Calculate the initial slack as the difference between the global
      time limit and the sum of the manually set time limits in the
      path.

    * If the slack is negative, report an error and abort. The sum of
      the manual annotations exceeded the time limit which had been
      set for the whole path in the Service Activity.

    * If the slack is zero and there exist free nodes in the path,
      report an error and abort. Every node needs to have a time limit
      greater than zero.

    * Otherwise, if there are free nodes in the path, split up the slack
      between them. If this is the first path, no free nodes will be annotated,
      so all the slack can be distributed. Otherwise, some free nodes will be
      already annotated from the previous paths. Since the previous paths were
      at least as restrictive as this one, we can subtract their annotated time
      limits from the slack and split the remaining slack among the nodes which
      have not been annotated yet.
*-
import '../common/utils.eol';

-*
   Current assumptions: acyclic graph with only one initial node
   Output: returns true when all nodes reachable from the starting node
           are successfully annotated, false otherwise.
*-
$pre start.isDefined()
operation annotateTimeLimits(global_limit : Real, start : FlowNode) : Boolean {
  var paths        := getAllPathsFrom(start);

  -- Cache all manual time limits and relax all automatic constraints
  for (path in paths) {
    for (node in path.select(r|r.isKindOf(Activity) and r.hasAutomaticPerformanceAnnotation())) {
      node.annotation.secsTimeLimit := global_limit;
    }
    path.~manualSum     := getManualTimeLimitSum(path);
    path.~startingSlack := global_limit - path.~manualSum;
    path.~freeCount     := countFreeNodes(path);
  }

  -- Use the paths to establish the constraints, using the most restrictive
  -- paths first. Otherwise, results would vary depending on what path got
  -- evaluated first, and would be inconsistent.
  for (path in paths.sortBy(p | p.getLimitEstimateForFreeNodes())) {
    var slack := path.~startingSlack;
    var freeCount := path.~freeCount;

    if (isApproximatelyEqual(slack, 0.0, 0.0001)) {
      if (freeCount > 0) {
        System.user.inform('Nodes with manual restrictions in path '
          + path.select(r|r.isKindOf(Activity)).collect(r|r.name).asString()
          + ' left no slack to establish the automatic restrictions (had '
          + global_limit + ' seconds)');
        return false;
      }
    } else if (slack < 0) {
      System.user.inform('Nodes with manual restrictions in path '
        + path.select(r|r.isKindOf(Activity)).collect(r|r.name).asString()
        + ' have used up more than the available time ('
        + path.~manualSum + ', with ' + global_limit + ' available)');
      return false;
    } else if (freeCount > 0) {
      splitSlackOverFreeNodes(path, global_limit);
    }
  }

  return true;
}

-- Returns an estimate of the time available for each free node in the path.
-- If there are no free nodes, it will use an arbitrarily large value to ensure
-- that it is one of the last ones. We only want paths with no free nodes for
-- consistency checking, anyway.
operation Sequence getLimitEstimateForFreeNodes() {
  if (self.~freeCount = 0) {
    return 1000000;
  } else {
    return self.~startingSlack/self.~freeCount;
  }
}

$pre path.isDefined() and path.notEmpty() and global_limit > 0
operation splitSlackOverFreeNodes(path : Sequence, global_limit) {
  -*
    There are two possibilities:
     * this is the first path in the graph, so all free nodes can be updated
       to the new time limit.
     * some free nodes were already annotated by paths which were at least as
       restrictive as this one, so we can safely ignore them. Use the remaining
       slack for the nodes which have not been annotated yet.
  *-
  var unrestricted := getUnrestrictedNodes(path, global_limit);
  if (unrestricted.notEmpty()) {
    var restricted := getRestrictedNodes(path, global_limit);
    var usedTime   := restricted.collect(node | node.getTimeLimit()).sum();
    var slack      := global_limit - usedTime;
    var limit      := slack / unrestricted.size();

    for (node  in unrestricted) {
        node.setTimeLimit(limit);
    }
  }
}

-- TIME LIMITS: QUERIES AND UPDATES -------------

-- Returns the sum of the time limits of the nodes which have manual time limts.
operation getManualTimeLimitSum(path : Sequence) : Real {
  return path.select(node | node.isKindOf(Activity) and node.hasManualPerformanceAnnotation())
             .collect(r|r.getTimeLimit()).sum();
}

operation countFreeNodes(path : Sequence) : Integer {
  return path.select(node | node.isKindOf(Activity) and not node.hasManualPerformanceAnnotation()).size();
}

-- RESTRICTED/UNRESTRICTED NODES ----------------

-- Returns all nodes in the path which do not have a performance restriction yet.
operation getUnrestrictedNodes(path : Sequence, global_limit) : Sequence {
  return path.select(node | node.isKindOf(Activity) and not node.isRestricted(global_limit));
}

-- Returns all nodes in the path which already have a performance restriction.
operation getRestrictedNodes(path : Sequence, global_limit) : Sequence {
  return path.select(node | node.isKindOf(Activity) and node.isRestricted(global_limit));
}

-- Returns true if the node has a performance restriction, either manual or
-- automatic. Automatic restrictions which are equal to the specified dummy
-- value are considered not to exist.
$pre dummy_value > 0
operation Activity isRestricted(dummy_value) : Boolean {
  return self.annotation.isDefined()
         and (self.annotation.manuallyAdded
              or not isApproximatelyEqual(self.getTimeLimit(), dummy_value, 0.01));
}
