import "platform:/plugin/es.uca.modeling.performance.sodmt.eol/eol/time_limits_new.eol";
import "platform:/plugin/es.uca.modeling.performance.sodmt.eol/eol/time_limits.eol";
import "platform:/plugin/es.uca.modeling.performance.sodmt.eol/eol/concurrent_users.eol";

operation getStartNode() {
  return ActivityNode.all.select(e|e.incoming.isEmpty() and not e.isKindOf(PerformanceAnnotation)).first();
}

operation getEndNodes() {
  return ActivityNode.all.select(e|e.outgoing.isEmpty() and not e.isKindOf(PerformanceAnnotation));
}

operation assertConstraintsEquals(globalLimit : Real, expectedConstraints : Sequence) {
  var actualConstraints := aggregateConstraints(globalLimit, getEndNodes()).get(1);
  assertConstraintsEquals(expectedConstraints, actualConstraints);
}

operation assertConstraintsEquals(expected : Sequence, actual : Sequence) {
  assertEquals("Both sets of constraints should have the same number of elements",
    expected.size(), actual.size());

  for (i in 0.to(expected.size() - 1)) {
    var exp := expected.get(i);
    var act := actual.get(i);

    assertEquals("The " + i + "-th constraint should have the same number of elements",
      exp.size(), act.size());
    for (j in 0.to(exp.size() - 1)) {
      assertEquals(
        "The " + j + "-th element of the " + i + "-th constraint should be approximately equal to " + exp.get(j),
        exp.get(j), act.get(j), 5);
    }
  }
}

-*
  Checks if the results produced by the old and the new algorithm are equal or not.
*-
operation assertOldAndNewResultsAreEqual(globalLimit : Real, shouldSucceed : Boolean) {
    var successOld := annotateTimeLimits(globalLimit, getStartNode());
    var tlimitOld  := getTimeLimitMap();
    var successNew := distributeTime(globalLimit, getEndNodes());
    var tlimitNew  := getTimeLimitMap();

    assertEquals("Old and new algorithms should produce the same number of results",
        tlimitOld.size(), tlimitNew.size());
    for (key : String in tlimitOld.keySet()) {
        var vOld := tlimitOld.get(key);
        var vNew := tlimitNew.get(key);
        assertEquals(vOld, vNew, 15);
    }

    if (shouldSucceed) {
        assertTrue("Old algorithm should succeed", successOld);
        assertEquals("New algorithm should succeed", shouldSucceed, successNew);
    } else {
        assertFalse("Old algorithm should not succeed", successOld);
        assertEquals("New algorithm should not succeed", shouldSucceed, successNew);
    }
}

operation getTimeLimitMap() : Map {
    var results : Map;
    for (act in ExecutableNode.all) {
      results.put(act.name, act.annotation.secsTimeLimit);
    }
    return results;
}

operation pair(x, y) : Sequence {
  return Sequence { x, y };
}
